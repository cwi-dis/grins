#!/usr/local/bin/esh -f

# Usage:
#	domk -- make everything in correct order, also compile .py files
#	domk clean -- remove everything that can be regenerated by domk
#	domk cleancf -- remove config files that can be regenerated
#	domk cleanbin -- remove binary files that can be regenerated
#	domk cleanpyc -- remove .pyc and .pyo files
#	domk freeze [cmifed|grins] -- create frozen binary (grins default)

case `uname -sr` in
SunOS\ 5.*) ARCH=sunos5;;
IRIX\ 5.*) ARCH=irix5;;
IRIX\ 6.2) ARCH=irix62;;
IRIX\ 6.*) ARCH=irix6;;
*) echo 'unknown architecture' >&2; exit 1;;
esac

case $ARCH in
irix*) make=smake;;
sunos5) make=gmake;;
esac

CHAMELEON=`pwd`

freeze=no

depth=.
cd() {
	x=$-; set -
	dir=$1
	chdir $dir
	while :
	do
		case $dir in
		..)	dir=.
			depth=`expr $depth : '\.\./\(.*\)$'`
			;;
		../*)	dir=`expr $dir : '\.\./\(.*\)'`
			depth=`expr $depth : '\.\./\(.*\)'`
			;;
		*/*/..)	dir=`echo $dir | sed 's;/[^/]*/\.\.;;'`
			;;
		*/..)	dir=.
			;;
		*/../*)	dir=`echo $dir | sed 's;[^/]*/\.\./;;'`
			;;
		*)	break
			;;
		esac
	done
	case $dir in
	.)	;;
	*)	depth=`echo $dir | sed 's;[^/]*;..;g'`/$depth;;
	esac
	set -$x
}

mkclean() {
	cd python/build.$ARCH
	for dir in Modules Objects Parser Python
	do
		case $1 in
		all|binary)	rm -f $dir/*.o;;
		esac
		case $1 in
		all|config)	rm -f $dir/Makefile;;
		esac
	done
	case $1 in
	all|binary)	rm -f *.a *.o python;;
	esac
	case $1 in
	all|config)	rm -f Makefile Modules/Makefile.pre Modules/config.c
			rm -f config.cache
			;;
	esac
	cd ../Extensions
	for dir in X11 img midi
	do
		if [ -d $dir/build.$ARCH ]
		then
			cd $dir/build.$ARCH
			case $1 in
			all|binary)	rm -f python *.o *.a;;
			esac
			case $1 in
			all|config)	rm -f Makefile Makefile.pre config.c sedscript;;
			esac
			cd ../..
		fi
	done
	cd $depth
	case $ARCH in
	irix6*)	;;
	*)	cd mm/mmpython/$ARCH
		case $1 in
		all|binary)	rm -f python *.o *.a;;
		esac
		case $1 in
		all|config)	rm -f Makefile Makefile.pre config.c sedscript;;
		esac
		cd $depth
		;;
	esac
}

while [ $# -gt 0 ]
do
	case $1 in
	clean)	mkclean all
		exit;;
	cleancf)mkclean config
		exit;;
	cleanbin)
		mkclean binary
		exit;;
	cleanpyc)
		find mm python -name '*.py[co]' -print | xargs rm -f
		exit;;
	freeze)
		freeze=grins
		main=grins
		shift
		case ${1-undefined} in
		cmifed|editor)	freeze=editor; main=cmifed; shift;;
		grins)	freeze=grins; main=grins; shift;;
		esac
		;;
	nomake)
		nomake=yes
		shift
		;;
	*)
		break
		;;
	esac
done

for i
do
	case $i in
	CHAMELEON=*) eval "$i";;
	*=*)	;;
	*)	echo "$0: invalid argument, only Make assignments allowed" >&2
		exit 1
		;;
	esac
done

set ${1+"$@"} CHAMELEON=$CHAMELEON

python0=$CHAMELEON/python/build.$ARCH/python
python=$CHAMELEON/mm/mmpython/$ARCH/python
PYTHONPATH=$CHAMELEON/python/Lib; export PYTHONPATH
compdir() {
	case $1 in
	-r)	recurse=compdir; shift;;
	*)	recurse=:;;
	esac
	for f in $1/*
	do
		if [ -d $f ]
		then
			$recurse -r $f
		elif [ $f =~ '*.py' ]
		then
			if [ ! -f ${f}c ] || [ $f -nt ${f}c ]
			then
				(set -x; $python -c "import py_compile; py_compile.compile('$f')")
			fi
			if [ ! -f ${f}o ] || [ $f -nt ${f}o ]
			then
				(set -x; $python -O -c "import py_compile; py_compile.compile('$f')")
			fi
		elif [ $f =~ '*.py[co]' ] && [ ! -f ${f%?} ]
		then
			(set -x; rm $f)
		fi
	done
}

OPT=-O; export OPT
[ "$nomake" ] || (
set -x
cd python/build.$ARCH &&
if [ ! -f Makefile ]
then
	if [ -f config.status ]
	then
		./config.status
	else
		../configure --with-gcc=no
	fi
else
	:
fi &&
$make ${1+"$@"} Makefiles &&
$make ${1+"$@"} all &&
cd ../Extensions/X11/build.$ARCH &&
if [ ! -f Makefile ]
then
	VERSION=`$python0 -c "import sys; print sys.version[:3]"`
	$make -f ../Makefile.pre.in srcdir=.. VPATH=.. \
		VERSION=$VERSION \
		installdir=../../../build.$ARCH/install Makefile
else
	$make ${1+"$@"} Makefile
fi &&
$make ${1+"$@"} lib.a &&
cd ../../img/build.$ARCH  &&
if [ ! -f Makefile ]
then
	VERSION=`$python0 -c "import sys; print sys.version[:3]"`
	$make -f ../Makefile.pre.in srcdir=.. VPATH=.. \
		VERSION=$VERSION \
		installdir=../../../build.$ARCH/install Makefile
else
	$make ${1+"$@"} Makefile
fi &&
$make ${1+"$@"} lib.a &&
case $ARCH in
irix*)
	cd ../../midi/build.$ARCH &&
	if [ ! -f Makefile ]
	then
		VERSION=`$python0 -c "import sys; print sys.version[:3]"`
		$make -f ../Makefile.pre.in srcdir=.. VPATH=.. \
			VERSION=$VERSION \
			installdir=../../../build.$ARCH/install Makefile
	else
		$make ${1+"$@"} Makefile
	fi &&
	$make lib.a
	;;
esac &&
case $ARCH in
irix6*)	;;
*)
	cd ../../../../mm/mmpython/$ARCH &&
	if [ ! -f Makefile ]
	then
		VERSION=`$python0 -c "import sys; print sys.version[:3]"`

		$make -f ../Makefile.pre.in srcdir=.. VPATH=.. \
			VERSION=$VERSION \
			installdir=../../../python/build.$ARCH/install Makefile
	else
		$make ${1+"$@"} Makefile
	fi
	;;
esac &&
$make ${1+"$@"} python &&
cd $depth &&
CMIF=$CHAMELEON/mm PYTHONPATH=$CHAMELEON/mm/lib:$CHAMELEON/python/Lib:$CHAMELEON/python/Lib/test:$CHAMELEON/python/Lib/plat-$ARCH $python -c 'import MMAttrdefs'
) &&
[ "$nomake" ] || (
compdir -r $CHAMELEON/python/Lib
for d in $CHAMELEON/mm/common/motif $CHAMELEON/mm/common \
	 $CHAMELEON/mm/editor/motif $CHAMELEON/mm/editor \
	 $CHAMELEON/mm/grins/motif $CHAMELEON/mm/grins \
	 $CHAMELEON/mm/lib/motif $CHAMELEON/mm/lib \
	 $CHAMELEON/mm/pylib \
	 $CHAMELEON/mm/video $CHAMELEON/python/Extensions/X11/Lib \
	 $CHAMELEON/python/Extensions/img/Lib \
	 $CHAMELEON/python/Extensions/midi/Lib \
	 $CHAMELEON/cartermill/code
do
	compdir $d
done
)
# alternative command:
#$python $CHAMELEON/python/Lib/compileall.py $CHAMELEON/{python/{Lib,Extensions/{X11,img,midi}/Lib},mm/{common,editor,grins,lib,player,pylib,video}}
#$python -O $CHAMELEON/python/Lib/compileall.py $CHAMELEON/{python/{Lib,Extensions/{X11,img,midi}/Lib},mm/{common,editor,grins,lib,player,pylib,video}}

case $freeze in
no)	;;
*)
	macexcl='-x mac_window -x macpath -x macurl2path -x MACVideoChannel -x MACVideoDuration -x audiodevmac'
	ntexcl='-x ntpath -x nturl2path -x dospath -x NTVideoChannel -x NTVideoDuration -x audiodevwin'
	allexcl='-x pdb -x trace'
	case $ARCH in
	irix*)	extend="-e $CHAMELEON/python/Extensions/midi/build.$ARCH"
		extpath=":$CHAMELEON/python/Extensions/midi/build.$ARCH"
		exclGL='-x GL_window -x gl -x fm -x GL -x GET'
		exclthread='-x mm -x thread -x MPEGVideoChannel
			-x MPEGVideoDuration -x MovieChannel -x MpegDuration'
		exclude="$exclGL $exclthread -x FCNTL
			-x PseudoHtmlChannel -x audiodevsun"
		;;
	sunos*)	exclude='-x audiodevsgi'
		extend="-e $CHAMELEON/mm/mmpython/$ARCH"
		extpath=''
		;;
	esac &&
	set -x &&
	PYTHONPATH=$CHAMELEON/mm/$freeze/motif:$CHAMELEON/mm/$freeze:$CHAMELEON/mm/common/motif:$CHAMELEON/mm/common:$CHAMELEON/mm/lib/motif:$CHAMELEON/mm/lib:$CHAMELEON/mm/video:$CHAMELEON/mm/pylib:$CHAMELEON/mm/pylib/audio:$CHAMELEON/python/Lib:$CHAMELEON/python/Lib/test:$CHAMELEON/python/Lib/plat-$ARCH:$CHAMELEON/python/Extensions/X11/Lib:$CHAMELEON/python/Extensions/img/Lib:$CHAMELEON/python/Extensions/midi/Lib:$CHAMELEON/python/Extensions/X11/build.$ARCH:$CHAMELEON/python/Extensions/img/build.$ARCH$extpath &&
	export PYTHONPATH &&
	$python -O $CHAMELEON/python/Tools/freeze/freeze.py \
		-o frozen.$freeze.$ARCH \
		-p $CHAMELEON/python/build.$ARCH/install \
		-e $CHAMELEON/python/Extensions/X11/build.$ARCH \
		-e $CHAMELEON/python/Extensions/img/build.$ARCH \
		$extend \
		$allexcl \
		$exclude \
		$macexcl \
		$ntexcl \
		-x fastimp -x pprint -x jpeg \
		-x Tkinter \
		-x audiohcom -x audiovoc -x audio8svx \
		-x audiosndt -x audiosndr \
		mm/$freeze/$main.py \
		-m imgsgi imggif imgpgm imgppm imgpbm imgtiff imgjpeg imgbmp \
		imgxbm imgpng &&
	cd frozen.$freeze.$ARCH &&
	make CHAMELEON=$CHAMELEON
	;;
esac
