#!/usr/local/bin/esh -f

# Usage:
#	domk -- make everything in correct order, also compile .py files
#	domk clean -- remove everything that can be regenerated by domk
#	domk cleancf -- remove config files that can be regenerated
#	domk cleanbin -- remove binary files that can be regenerated
#	domk cleanpyc -- remove .pyc and .pyo files
#	domk freeze [cmifed|grins] -- create frozen binary (grins default)

INCLUDEGIF=yes		# set to "yes" if GIF supported to be included
if [ -f /usr/include/cl.h ]
then
	INCLUDECL=yes
else
	INCLUDECL=no
fi
INCLUDECL=no

case `uname -sr` in
SunOS\ 5.*) ARCH=sunos5;;
IRIX\ 5.*) ARCH=irix5;;
IRIX\ 6.2) ARCH=irix62;;
IRIX\ 6.5) ARCH=irix65;;
IRIX\ 6.*) ARCH=irix6;;
Linux\ *) ARCH=linux;;
*) echo 'unknown architecture' >&2; exit 1;;
esac

case $ARCH in
irix*) make='smake -J 1';;
sunos5) make=gmake;;
*) make=make;;
esac

case $ARCH in
linux)	exflag=;;
*)	exflag=-;;
esac

unset LANG # sort order in various programs is affected differently by LANG

CHAMELEON=`pwd`

freeze=no

depth=.
cd() {
	x=$-; set -
	dir=$1
	chdir $dir
	while :
	do
		case $dir in
		..)	dir=.
			depth=`expr $depth : '\.\./\(.*\)$'`
			;;
		../*)	dir=`expr $dir : '\.\./\(.*\)'`
			depth=`expr $depth : '\.\./\(.*\)'`
			;;
		*/*/..)	dir=`echo $dir | sed 's;/[^/]*/\.\.;;'`
			;;
		*/..)	dir=.
			;;
		*/../*)	dir=`echo $dir | sed 's;[^/]*/\.\./;;'`
			;;
		*)	break
			;;
		esac
	done
	case $dir in
	.)	;;
	*)	depth=`echo $dir | sed 's;[^/][^/]*;..;g'`/$depth;;
	esac
	set -$x
}

mkclean() {
	cd python/build.$ARCH
	for dir in Modules Objects Parser Python
	do
		case $1 in
		all|binary)	rm -f $dir/*.o;;
		esac
		case $1 in
		all|config)	rm -f $dir/Makefile;;
		esac
	done
	case $1 in
	all|binary)	rm -f *.a *.o python;;
	esac
	case $1 in
	all|config)	rm -f Makefile Modules/Makefile.pre Modules/config.c
			rm -f config.cache
			;;
	esac
	cd ../Extensions
	for dir in X11 img midi
	do
		if [ -d $dir/build.$ARCH ]
		then
			cd $dir/build.$ARCH
			case $1 in
			all|binary)	rm -f python *.o *.a;;
			esac
			case $1 in
			all|config)	rm -f Makefile Makefile.pre config.c sedscript;;
			esac
			cd ../..
		fi
	done
	cd $depth
	if [ ! -f /usr/include/dmedia/moviefile.h ]
	then
		cd mm/mmpython/$ARCH
		case $1 in
		all|binary)	rm -f python *.o *.a;;
		esac
		case $1 in
		all|config)	rm -f Makefile Makefile.pre config.c sedscript;;
		esac
		cd $depth
	fi
}

while [ $# -gt 0 ]
do
	case $1 in
	clean)	mkclean all
		exit;;
	cleancf)mkclean config
		exit;;
	cleanbin)
		mkclean binary
		exit;;
	cleanpyc)
		find mm python -name '*.py[co]' -print | xargs rm -f
		exit;;
	freeze)
		freeze=grins
		main=grins
		help=player
		dist=grins
		shift
		case ${1-undefined} in
		cmifed|editor)	freeze=editor; main=cmifed; help=editor; dist=grinsed; shift;;
		grins)	freeze=grins; main=grins; help=player; dist=grins; shift;;
		esac
		;;
	nomake)
		nomake=yes
		shift
		;;
	*)
		break
		;;
	esac
done

for i
do
	case $i in
	CHAMELEON=*) eval "$i";;
	*=*)	;;
	*)	echo "$0: invalid argument, only Make assignments allowed" >&2
		exit 1
		;;
	esac
done

set ${1+"$@"} CHAMELEON=$CHAMELEON

python=$CHAMELEON/mm/mmpython/$ARCH/python
PYTHONPATH=$CHAMELEON/python/Lib; export PYTHONPATH
compdir() {
	case $1 in
	-r)	recurse=compdir; shift;;
	*)	recurse=:;;
	esac
	for f in $1/*
	do
		if [ -d $f ]
		then
			$recurse -r $f
		elif [ $f =~ '*.py' ]
		then
			if [ ! -f ${f}c ] || [ $f -nt ${f}c ]
			then
				(set -x; $python -c "import py_compile; py_compile.compile('$f')")
			else
				:
			fi
			if [ ! -f ${f}o ] || [ $f -nt ${f}o ]
			then
				(set -x; $python -O -c "import py_compile; py_compile.compile('$f')")
			else
				:
			fi
		elif [ $f =~ '*.py[co]' ] && [ ! -f ${f%?} ]
		then
			(set -x; rm $f)
		else
			:
		fi
	done
}

case $INCLUDECL in
yes)	NOCL=;;
no)	NOCL=yes INCLUDECL=;;
esac
: ${OPT=-O}; export OPT
[ "$nomake" ] || (
set -x
{ [ -d python/build.$ARCH ] || mkdir python/build.$ARCH; } &&
cd python/build.$ARCH &&
if [ ! -f Makefile ]
then
	if [ -f config.status ]
	then
		./config.status
	else
		../configure --without-gcc `[ -f /usr/include/dmedia/moviefile.h ] || echo --with-thread`
	fi
else
	:
fi &&
if [ ! -f Modules/Setup ]
then
	$make Makefiles &&
	ex $exflag Modules/Setup <<\EOF &&
/^#audioop/s/#//
/^#imageop/s/#//
w
q
EOF
	case $ARCH in
	irix*)
		ex $exflag Modules/Setup <<EOF
/^#al/s/#//
${INCLUDECL:+/^#cl/s/#//
}w
q
EOF
		;;
	sunos*)
		ex $exflag Modules/Setup <<\EOF
/^sunaudio/s/#//
w
q
EOF
		;;
	esac
else
	:
fi &&
$make ${1+"$@"} Makefiles &&
$make ${1+"$@"} all &&
VERSION=`./python -c "import sys; print sys.version[:3]"` &&
{ [ -d install ] || mkdir install; } &&
{ [ -d install/include ] || mkdir install/include; } &&
{ [ -d install/include/python$VERSION ] || mkdir install/include/python$VERSION; } &&
{ [ -d install/lib ] || mkdir install/lib; } &&
{ [ -d install/lib/python$VERSION ] || mkdir install/lib/python$VERSION; } &&
{ [ -d install/lib/python$VERSION/config ] || mkdir install/lib/python$VERSION/config; } &&
cd install/include/python$VERSION &&
for f in *
do
	[ ! -h $f -o -f $f ] || rm $f
done &&
for f in ../../../../Include/*.h ../../../config.h
do
	[ -h ${f##*/} ] || ln -s $f .
done &&
cd ../../lib/python$VERSION/config &&
for f in *
do
	[ ! -h $f -o -f $f ] || rm $f
done &&
H=../../../.. &&
for f in $H/Modules/Makefile $H/Modules/Setup $H/Modules/Setup.local $H/Modules/Setup.thread $H/Modules/config.c $H/../Modules/config.c.in $H/config.h $H/libpython$VERSION.a $H/../Modules/makesetup $H/Modules/python.o
do
	[ -h ${f##*/} ] || ln -s $f .
done &&
cd $H &&
{ [ -d ../Extensions/X11/build.$ARCH ] || mkdir ../Extensions/X11/build.$ARCH; } &&
cd ../Extensions/X11/build.$ARCH &&
if [ ! -f Setup ]
then
	xlibs=
	if [ -d /usr/dt ]
	then
		MOTIF=yes
		echo 'MOTIF = /usr/dt' >> Setup
	else
		:
	fi &&
	if [ -d /usr/openwin ]
	then
		OPENWIN=yes
		echo 'OPENWIN = /usr/openwin' >> Setup
	else
		:
	fi &&
	if [ -f /usr/include/dmedia/moviefile.h ]
	then
		xlibs="$xlibs -lmovieplay -lmoviefile -ldmedia"
		echo 'mv mvmodule.o' >> Setup
	else
		:
	fi &&
	echo >> Setup "\
CHAMELEON=../../../..
LIBHTMLW=\$(CHAMELEON)/lib/$ARCH/libhtmlw
HTML HTMLmodule.o htmlevent.o -I\$(LIBHTMLW) ${MOTIF:+-I\$(MOTIF)/include} ${OPENWIN:+-I\$(OPENWIN)/include}" &&
	xlibs="$xlibs \$(LIBHTMLW)/libhtmlw.a" &&
	if [ -f /usr/include/GL/glx.h ]
	then
		xlibs="$xlibs -lGLw -lGL"
		echo 'glX glXmodule.o' >> Setup
	else
		:
	fi &&
	echo >> Setup "\
Mrm Mrmmodule.o mrmhierarchyobject.o ${MOTIF:+-I\$(MOTIF)/include -L\$(MOTIF)/lib -R\$(MOTIF)/lib} ${OPENWIN:+-I\$(OPENWIN)/include}
Xm Xmmodule.o Xmsupport.o xmevent.o ${MOTIF:+-I\$(MOTIF)/include -L\$(MOTIF)/lib -R\$(MOTIF)/lib} ${OPENWIN:+-I\$(OPENWIN)/include}
Xrm Xrmmodule.o ${OPENWIN:+-I\$(OPENWIN)/include}
Xlib Xlibmodule.o regionobject.o ${OPENWIN:+-I\$(OPENWIN)/include}
Xt Xtmodule.o XColor.o Xttypes.o Fontobject.o GCobject.o Pixmapobject.o wclassobject.o widgetobject.o display.o translations.o event.o -DUSE_EDITRES ${OPENWIN:+-I\$(OPENWIN)/include} $xlibs -lMrm -lXm -lXext -lXmu -lXt -lX11"
else
	:
fi &&
if [ ! -f Makefile ]
then
	$make -f ../Makefile.pre.in srcdir=.. VPATH=.. \
		VERSION=$VERSION \
		installdir=../../../build.$ARCH/install Makefile
else
	$make ${1+"$@"} Makefile
fi &&
$make ${1+"$@"} lib.a &&
{ [ -d ../../img/build.$ARCH ] || mkdir ../../img/build.$ARCH; } &&
cd ../../img/build.$ARCH  &&
if [ ! -f Setup ]
then
	cat >> Setup <<EOF
CHAMELEON=../../../..
X11DIR=../../X11
BASELIB=\$(X11DIR)/build.$ARCH/lib.a
BASESETUP=\$(X11DIR)/build.$ARCH/Setup
PBMINC=\$(CHAMELEON)/lib/$ARCH/netpbm
PBMLIB=\$(CHAMELEON)/lib/$ARCH/netpbm
TIFFINC=\$(PBMINC)/libtiff
TIFFLIB=\$(PBMLIB)/libtiff
JPEGINC=\$(CHAMELEON)/lib/$ARCH/jpeg
JPEGLIB=\$(CHAMELEON)/lib/$ARCH/jpeg
PBMLIBS=-L\$(PBMLIB) -lppm -lpgm -lpbm
TIFFLIBS=\$(TIFFLIB)/libtiff.a
JPEGLIBS=-L\$(JPEGLIB) -ljpeg
PNGLIB=\$(CHAMELEON)/lib/$ARCH/libpng
PNGINC=\$(CHAMELEON)/lib/$ARCH/libpng
ZLIBDIR=\$(CHAMELEON)/lib/$ARCH/zlib
ZLIBINC=\$(CHAMELEON)/lib/$ARCH/zlib
PNGLIBS=\$(PNGLIB)/libpng.a
ZLIBS=\$(ZLIBDIR)/libz.a
imgformat imgformatmodule.o \$(SYSFLAGS)
imgppm imgppmmodule.o -I\$(PBMINC) \$(SYSFLAGS)
imgpgm imgpgmmodule.o -I\$(PBMINC) \$(SYSFLAGS)
imgpbm imgpbmmodule.o -I\$(PBMINC) \$(SYSFLAGS)
imgtiff imgtiffmodule.o tif_stdio.o -I\$(TIFFINC) \$(SYSFLAGS)
imgcolormap imgcolormapmodule.o dither.o genmap.o mppm3.o \$(SYSFLAGS)
${INCLUDEGIF:+imggif imggifmodule.o \$(SYSFLAGS)}
imgsgi imgsgimodule.o \$(SYSFLAGS)
imgop imgopmodule.o \$(SYSFLAGS)
${NOCL:+imgjpeg imgjpegmodule.o -I\$(JPEGINC) -I\$(JPEGLIB) \$(SYSFLAGS)}
imgpng imgpngmodule.o -I\$(PNGINC) -I\$(ZLIBINC) \$(SYSFLAGS) \$(PBMLIBS) \$(TIFFLIBS) ${NOCL:+\$(JPEGLIBS)} \$(PNGLIBS) \$(ZLIBS)
EOF
else
	:
fi &&
if [ ! -f Makefile ]
then
	$make -f ../Makefile.pre.in srcdir=.. VPATH=.. \
		VERSION=$VERSION \
		installdir=../../../build.$ARCH/install Makefile
else
	$make ${1+"$@"} Makefile
fi &&
$make ${1+"$@"} lib.a &&
if [ -f /usr/include/midi.h -a $ARCH =~ 'irix*' ]
then
	{ [ -d ../../midi/build.$ARCH ] || mkdir ../../midi/build.$ARCH; } &&
	cd ../../midi/build.$ARCH &&
	if [ ! -f Setup ]
	then
		cat > Setup <<EOF
X11DIR=../../X11
IMGDIR=../../img
BASELIB=\$(X11DIR)/build.$ARCH/lib.a \$(IMGDIR)/build.$ARCH/lib.a
BASESETUP=\$(X11DIR)/build.$ARCH/Setup \$(IMGDIR)/build.$ARCH/Setup
MIDILIB=-lmidi
sgimidi sgimidimodule.o \$(SYSFLAGS) \$(MIDILIB)
EOF
	else
		:
	fi &&
	if [ ! -f Makefile ]
	then
		$make -f ../Makefile.pre.in srcdir=.. VPATH=.. \
			VERSION=$VERSION \
			installdir=../../../build.$ARCH/install Makefile
	else
		$make ${1+"$@"} Makefile
	fi &&
	$make lib.a
else
	:
fi &&
{ [ -d ../../../../mm/mmpython/$ARCH ] || mkdir ../../../../mm/mmpython/$ARCH; } &&
if [ ! -f /usr/include/dmedia/moviefile.h ]
then
	cd ../../../../mm/mmpython/$ARCH &&
	if [ ! -f Makefile ]
	then
		$make -f ../Makefile.pre.in srcdir=.. VPATH=.. \
			VERSION=$VERSION \
			installdir=../../../python/build.$ARCH/install Makefile
	else
		$make ${1+"$@"} Makefile
	fi
else
	:
fi &&
$make ${1+"$@"} python &&
if [ -f /usr/include/dmedia/moviefile.h -a ! -f ../../../../mm/mmpython/$ARCH/python ]
then
	d1=`pwd`
	cd ../../../../mm/mmpython/$ARCH
	d2=`pwd`
	while [ ${d1%%/*} = ${d2%%/*} ]
	do
		d1=${d1#*/}
		d2=${d2#*/}
	done
	d1=`echo $d2 | sed 's;[^/][^/]*;..;g'`/$d1
	ln -s $d1/python . &&
	cd $d1
else
	:
fi &&
cd $depth &&
CMIF=$CHAMELEON/mm PYTHONPATH=$CHAMELEON/mm/lib:$CHAMELEON/python/Lib:$CHAMELEON/python/Lib/test:$CHAMELEON/python/Lib/plat-$ARCH $python -c 'import MMAttrdefs'
) &&
{
[ "$nomake" ] || (
compdir -r $CHAMELEON/python/Lib &&
for d in $CHAMELEON/mm/common/motif $CHAMELEON/mm/common \
	 $CHAMELEON/mm/editor/motif $CHAMELEON/mm/editor \
	 $CHAMELEON/mm/grins/motif $CHAMELEON/mm/grins \
	 $CHAMELEON/mm/lib/motif $CHAMELEON/mm/lib \
	 $CHAMELEON/mm/pylib $CHAMELEON/mm/pylib/audio \
	 $CHAMELEON/mm/video $CHAMELEON/python/Extensions/X11/Lib \
	 $CHAMELEON/python/Extensions/img/Lib \
	 $CHAMELEON/python/Extensions/midi/Lib \
	 $CHAMELEON/cartermill/code
do
	compdir $d || exit $?
done
# alternative command:
#$python $CHAMELEON/python/Lib/compileall.py $CHAMELEON/{python/{Lib,Extensions/{X11,img,midi}/Lib},mm/{common,editor,grins,lib,player,pylib,video}}
#$python -O $CHAMELEON/python/Lib/compileall.py $CHAMELEON/{python/{Lib,Extensions/{X11,img,midi}/Lib},mm/{common,editor,grins,lib,player,pylib,video}}
)
} &&

case $freeze in
no)	;;
*)
	macexcl='-x aetools -x EasyDialogs -x mac -x mac_window -x macfs -x MACFS -x MacOS -x macostools -x macpath -x macurl2path -x MACVideoChannel -x MACVideoDuration -x Required_Suite -x audio.devmac -x devmac -x greekconv -x ic'
	ntexcl='-x nt -x ntpath -x nturl2path -x dos -x dospath -x NTVideoChannel -x NTVideoDuration -x devwin -x audio.devwin -x SOCKS -x msvcrt'
	GLexcl='-x GL_window -x gl -x fm -x GL -x GET'
	allexcl='-x pdb -x trace -x os2 -x audio.svx8 -x CORBA.services -x sitecustomize'
	case $ARCH in
	irix*)	if [ -d $CHAMELEON/python/Extensions/midi/build.$ARCH ]
		then	extend="-e $CHAMELEON/python/Extensions/midi/build.$ARCH"
			extpath=":$CHAMELEON/python/Extensions/midi/build.$ARCH"
		else
			extend=
			extpath=
		fi
		exclthread='-x mm -x thread -x MPEGVideoChannel
			-x MPEGVideoDuration -x MovieChannel -x MpegDuration'
		exclude="$GLexcl $exclthread -x FCNTL${NOCL:+ -x cl}
			-x PseudoHtmlChannel -x devsun -x audio.devsun"
		;;
	sunos*)	exclude="$GLexcl -x glXconst -x glX -x mv -x audio.devsgi -x devsgi -x cl -x sgimidi -x VCR -x SGIVideoDuration"
		extend="-e $CHAMELEON/mm/mmpython/$ARCH"
		extpath=''
		;;
	esac &&
	case $freeze in
	grins)	exclude="$exclude -x SMILTreeWrite";;
	esac
	set -x &&
	PYTHONPATH=$CHAMELEON/mm/$freeze/motif:$CHAMELEON/mm/$freeze:$CHAMELEON/mm/common/motif:$CHAMELEON/mm/common:$CHAMELEON/mm/lib/motif:$CHAMELEON/mm/lib:$CHAMELEON/mm/video:$CHAMELEON/mm/pylib:$CHAMELEON/python/Lib:$CHAMELEON/python/Lib/test:$CHAMELEON/python/Lib/plat-$ARCH:$CHAMELEON/python/Extensions/X11/Lib:$CHAMELEON/python/Extensions/img/Lib:$CHAMELEON/python/Extensions/midi/Lib:$CHAMELEON/python/Extensions/X11/build.$ARCH:$CHAMELEON/python/Extensions/img/build.$ARCH$extpath &&
	export PYTHONPATH &&
	if [ -d frozen.$freeze.$ARCH ]
	then	rm -f frozen.$freeze.$ARCH/$main.py
	else	mkdir frozen.$freeze.$ARCH
	fi &&
	ln mm/$freeze/$main.py frozen.$freeze.$ARCH &&
	$python -O $CHAMELEON/python/Tools/freeze/freeze.py \
		-o frozen.$freeze.$ARCH \
		-p $CHAMELEON/python/build.$ARCH/install \
		-e $CHAMELEON/python/Extensions/X11/build.$ARCH \
		-e $CHAMELEON/python/Extensions/img/build.$ARCH \
		$extend \
		$allexcl \
		$exclude \
		$macexcl \
		$ntexcl \
		-x fastimp -x pprint -x jpeg \
		-x Tkinter \
		-x audio.hcom -x audio.voc -x audio.8svx \
		-x audio.sndt -x audio.sndr \
		frozen.$freeze.$ARCH/$main.py \
		-m imgsgi ${INCLUDEGIF:+imggif} imgpgm imgppm imgpbm imgtiff imgjpeg imgbmp \
		imgxbm imgpng &&
	cd frozen.$freeze.$ARCH &&
	sed -n 's/^\(M_[^:]*\): \(.*\)/\1\
\2/p' Makefile | sort -u > /usr/tmp/domk.$$.1 &&
	ls -1 M_* | comm -13 /usr/tmp/domk.$$.1 - | xargs rm -f &&
	rm -f /usr/tmp/domk.$$.1 &&
	make CHAMELEON=$CHAMELEON &&
	cd .. &&
	case $ARCH in
	irix*)
		PATH=/sbin:$PATH &&
		RAWIDB=$CHAMELEON/$dist.rawidb && export RAWIDB &&
		rm -f $dist.rawidb &&
		install -m 0444 -idb $dist.help.documentation -src mm/Build/common/QuickStart.pdf -F /usr/local/grins -O QuickStart.pdf &&
		install -m 0555 -idb $dist.sw.$help -src frozen.$freeze.$ARCH/$main -F /usr/local/grins -O $dist &&
		install -m 0444 -idb $dist.sw.$help -src mm/Build/common/license.txt -F /usr/local/grins -O license.txt &&
		rm -f dist/inst.README &&
		cp mm/Build/common/license.txt dist/inst.README &&
		chmod 444 dist/inst.README &&
# 		install -m 0444 -idb $dist.help.html -src mm/Help/unix/index.html -F /usr/local/grins/Help -O index.html &&
# 		for f in mm/Help/unix/$help/*
# 		do
# 			case "${f##*/}" in
# 			CVS|\*)	;;
# 			*)
# 				install -m 0444 -idb $dist.help.html -src $f -F /usr/local/grins/Help/unix/$help ${f##*/}
# 				;;
# 			esac
# 		done &&
		install -m 0444 -idb $dist.relnotes.relnotes -src mm/Build/unix/relnotes.html -F /usr/local/grins -O relnotes.html &&
		install -m 0444 -idb $dist.relnotes.relnotes -src mm/Build/unix/readme.txt -F /usr/local/grins -O readme.txt &&
		for f in mm/Examples/*
		do
			case "${f##*/}" in
			CVS|\*|*.txt)	;;
			*)
				install -m 0444 -idb $dist.help.examples -src $f -F /usr/local/grins/Examples ${f##*/}
				;;
			esac
		done &&
		case $dist in
		grinsed)
#			install -m 0444 -idb $dist.help.documentation -src mm/Build/common/tutorials.pdf -F /usr/local/grins -O tutorials.pdf &&
			install -m 0444 -idb $dist.sw.$help -src mm/.cmif_editors -F /usr/local/grins -O .cmif_editors &&
			for f in mm/GRiNS-Icons/*
			do
				case "${f##*/}" in
				*.tiff)
					install -m 0444 -idb $dist.sw.$help -src $f -F /usr/local/grins/GRiNS-Icons ${f##*/}
					;;
				esac
			done &&
			for f in mm/Templates/*
			do
				case "${f##*/}" in
				*.smil)
					install -m 0444 -idb $dist.sw.templates -src $f -F /usr/local/grins/Templates ${f##*/}
					;;
				esac
			done &&
			sed 's/ grins\./ grinsed./' grins.rawidb >> grinsed.rawidb
			;;
		esac &&
		PLe=`sed -n 's/.*patchlevel \([0-9][0-9]*\).*/\1/p' mm/editor/motif/patchlevel.py` &&
		PLp=`sed -n 's/.*patchlevel \([0-9][0-9]*\).*/\1/p' mm/grins/motif/patchlevel.py` &&
		PLe=`expr ${PLe:-0} + 10000` &&
		PLp=`expr ${PLp:-0} + 10000` &&
		case $freeze in
		editor)	PL=$PLe;;
		grins)	PL=$PLp;;
		esac &&
		rm -f $dist.spec~ &&
		cp $dist.spec $dist.spec~ &&
		sed -e "s/version [0-9][0-9]*/version $PL/" \
		    -e 's/\(grins\.[a-z][a-z]*\.[a-z][a-z]*\) [0-9][0-9]* [0-9][0-9]*/\1 '"$PLp $PLp/" \
		    -e 's/\(grinsed\.[a-z][a-z]*\.[a-z][a-z]*\) [0-9][0-9]* [0-9][0-9]*/\1 '"$PLe $PLe/" \
		    -e 's/\(replaces grins\.[a-z][a-z]*\.[a-z][a-z]* 0\) [0-9][0-9]*/\1 '"$PLp/" \
			$dist.spec~ > $dist.spec &&
		sort -o $RAWIDB +4u -7 -u $RAWIDB &&
		gendist -sbase $CHAMELEON -idb $RAWIDB -spec $CHAMELEON/$dist.spec -dist $CHAMELEON/dist -all -creator 'ORATRiX Development B.V.'
		;;
	esac
esac
