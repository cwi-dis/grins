In the following, replace CVSROOT with the actual value.  At Oratrix,
the value is
	oratrix.oratrix.nl:/ufs/mm/CVSPRIVATE
Other possibilities are values of the type
	:pserver:USERNAME@oratrix.oratrix.nl:/ufs/mm/CVSPRIVATE
where USERNAME has to be replaced by the actual value.

Prerequisites

WinCvs (we use version 1.1b6) from http://www.wincvs.org/
Visual C++ 6.0 (we use Service Pack 3).

Getting the Sources

Create a directory where you're going to put the sources.  Change the WinCvs
browser location to this directory (use View -> Change browser location...).
Then execute the following commands (use Admin -> CommandLine...):

cvs -d CVSROOT checkout -d cmif mm/demo
cvs -d :pserver:pythoncvs@cvs.python.org:/projects/cvsroot checkout -d python python/dist/src
cvs -d CVSROOT checkout lib-src/jpeg
cvs -d CVSROOT checkout python/Extensions/img python/Extensions/Pythonwin python/Extensions/win32

Compiling

Open the Visual C++ workspace
	cmif\win32\src\cmif extensions.dsw
Make sure the Active Configuration is "All cmif extensions/Win32
Release" and then build everything.

This will compile a lot of files and copy a number of files to
cmif\bin\win32.

After the compilation completed successfully, you should run the batch 
file cmif\win32\DXMedia\bin\reg.bat.

Configuring and Testing

If you didn't install things into D:\ufs\mm you need to make a few
changes to various files.

Edit cmif\bin\pythonwin.ini and replace all occurences of the string
"d:\ufs\mm" (or "D:\ufs\mm") to the absolute path name of the folder
you created above.  In other words, to the folder with the cmif and
python subfolders.  Also make the same change in cmif\iGRiNS.py.

You should now be able to double click cmif\bin\win32\pythonwin.exe
which should start a Python interpreter in a window.  If this works,
you should test that when you type "Exception" in the Pythonwin
window, you get something like
	<class exceptions.Exception at 419c20>
(the hexadecimal value may be different than this).  If you get
something else, you should try setting the environment variable
PYTHONHOME to the absolute path name of the python folder inside the
directory you created at the beginning and try again.  You can do that
either in the (per user or system wide) environment, or you can add
the line
	set PYTHONHOME=d:\ufs\mm\python
to the top of the cmif\bin\win32\runit.bat batch file (with the same
change made to this value as the one you made above).

If this works, you should be able to run the batch file
cmif\bin\win32\runit.bat to start the GRiNS editor.  This is a version 
that runs from the Python source, so when you make a change to any of
the Python source files, the effect should be noticeable without any
further steps.  (Of course, if you make a change to any of the C or
C++ sources you need to rebuild.)


Freezing

This section is not finished and is here only to remind the author.

5. Freeze (read also the readme.txt in cmif\Build\win32\Editor)
a) Set the absolute folders in cmif\Build\win32\Editor\domkp.bat
and \cmif\Build\win32\GRiNS\domkp.bat to agree with your configuration
(usually only the drive letter)
b) Run the bat files 
c) in "GRiNSed files" in the "cmif extensions" workspace, replace all
   source files in the "source files" subfolder.
d) build "GRiNSed files"
e) follow the same two steps for "GRiNS files" for the player.

6. In Build/win32, open GRiNSed.wse. Compile. This leaves an installer in
  the bin directory. Using "distribute" will send it to the unix fileserver.
  

Thats all.


  