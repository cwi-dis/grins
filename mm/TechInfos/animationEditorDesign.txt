Overall
--------
Recognizing the complexity of the task we can divide 
the process into three steps:

Step 1:
The purpose of this step is to partition complexity 
into manageable units of design/work (for both us and the user).
From the user view this step adds an 
animate element to the document albeit 
with default attribute values. 
	
(example: add an animate element for a region/node
selecting targetElement, animate element and value types)
(this is 1 and 2 in the skeleton below)

Step 2:
This step is the required animation editor.
Due to step 1 it is a multi-face editor.
This step is manageable by construction.
If its proven not manageable (subjective) 
then go to step 1 and add a partition attribute.
Rational subdivision is fundamental.
Initial design should pass common cases test.
(we need such list of common cases before actual design)
  
(example: build -an editor for- a special kind of animateMotion)
(this is 3 to 7 in the skeleton below)
			 
Step 3:
Manipulate animate elements the same way as other elements.	
Add/edit common attributes such as timing/sync
Use the same tools as media nodes
Fine tune in the source editor
Preview in full player

(out of animation editor)
(this is 8 in the skeleton below)



Animation editor skeleton (pre-design)
----------------------------------------
1. targetElement

The process starts when the user activates a region or a node animate command
	For nodes in the structure view 
	For regions from layout view (or structure view selecting node's region animation)
	Or for both from a DOM tree

The command opens the animation editor
	The editor for all cases is a window with a preview/draw area 
	plus decor elements we specify below
	The window shows always a region and its parent region 
	or/and topLayout (region is a 'subregion' for nodes)
	The parent region does not clip region but may show in some way the clip effect

Thus the targetElement element of the animation has been implicitly specified and is viewable


2a add animate element and value types

The window has a toolbar with some buttons 
One of them adds an animate element
While in the editor the user can add as many animations as he wants.
He can compose them to achieve the desired effect for the selected region/node  

When the button fires opens a dialog to select the animate element and values type

Certainly 
	The dialog has an option control to select 
	one of (animate, animateMotion, animateColor, set)

Possibly (if missing include next)
	There may be also an option to select animateable attribute
	(left, top, width, height, position, backgroundColor, etc)

Possibly (if missing include previous)
	An other area of the dialog shows a radio group.
	The radio group depends on the currently selected option
	and its a subset of (to, by, from_by, from_to, values, path)
	This subset depends on the selected option:
		path radio button is present only for animateMotion
		there is no any radio button for set element
		Etc

(Instead of selecting an animate element the user may be able
to select one of a predefined set of composite effects but
this needs elaboration)

On dialog dismiss we have specified the animate element 
and have given enough info to the editor to be context sensitive.
For this step we can add/remove any other partition attribute so that
the complexity is partitioned to manageable units and the 
subdivision is natural both for us and the user.

2b. edit/delete animate element
	The toolbar has a combo box with all animations defined for the region/node
	The user can select one of them to edit or delete
	Edit is similar to add: only the initial values differ ('add' comes into life using defaults)
	 
3. user interaction / recording 

If the user has selected (or for editing: the animation is)
	animate 
		he can resize the region in a way compatible with animation type (resizing is recorded)
		(he can edit size values see 5)
	animateMotion 
		he can move the region in a way compatible with animation type (movement is recorded)
		he can draw an SVG path if the animation type was 'path'
		(he can edit position values see 5)
	animateColor 
		he can specify color values selecting a set from a color spectrum band 
		in a way compatible with the animation type
	set 
		he can specify one value in the same way as animate, animateColor but only one

The tools/functionality here are:
	Recorder of resize/move.
	Recorder of color selection from spectrum band.
	An SVG path editor


4. select oneof instead of 4 (or for editing: replace)

A palette shows compatible predefined effects
	For example remarkable are those related with the DOM value
		animateMotion: from DOM out of scene, out of scene to DOM value
		animate size: from zero to DOM sizes, from DOM sizes to zero (for both width, height or one of them)
		animateColor: fade in to DOM background, fade out from DOM background
	Others are move-by, oscillation etc

5. user input

At the same time a dockable bar shows a set of user input elements
	accumulate, additive (check boxes)
	Time manipulations 
		speed (editbox) accelerate-decelerate (edit box or select predefined) autoReverse (check box)
	basic timing 
		(the details and sync will be specified out of the animation editor in the same way as media nodes)
	(calcMode can be assumed to be the default at this step)

At this point:
	we have specified explicitly or implicitly the attributeName (by resizing for example)
	the animation values compatible with one of (to, by, from_by, from_to, values, path)
	basic timing
	the default calc mode
	accumulate, additive
	time manipulations


6. elaboration

A special area of the dockable bar is devoted to specifying calcMode and its details
	calcMode 
		an option list on the dockable bar (always visible)
	keyTimes
		a pop up slider to mark key times and an edit box on the dockable bar (always visible)
	keySplines
		a pop up dialog to select from a predefined set 
		The pop up shows the splines as big buttons to select one or more
		For a set of such std splines see for example the spec doc.
		And of course an edit box on the dockable bar (always visible) 
		for fine tuning the selections

7. preview

There is a play button on the toolbar to preview the animation 
there are two options: 
	play component animation or all animations associated with the region/node
The preview player ignores out of node synchronization and uses a default context 

There is also a partially editable source preview 
(on a status like bar) for the currently selected animation	


8. exit
	set general node attributes
	synchronize with other elements
	full preview in player
	
