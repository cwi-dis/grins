[Last update of this file: 19 March 1992, by Guido]

CMIF editor sources
-------------------

This is the Python source code for the CMIF editor.  You also need the
CMIF library, ../lib, and of course Python 0.9.6 with FORMS 2.0b.

Documentation is in the FrameMaker file ../../fm/cmifed.frame.  The
CMIF format is described in ../../doc/CMIF (this may be out of date).
There are also miscellaneous other documentation files in ../../doc.

Besides Python files (*.py), there are also "form definition" files
(*.fd) that form an essential part of the source code; see below.

Files named *.pyc or *.fdc are cached binary versions of the
corresponding *.py or *.fd files and can be thrown away.  Files named
*~ are Emacs backup files.

Files named *.cmif are CMIF documents.  There are several demos (in
various states of decay...).


Python source files
-------------------

main.py			Main program: command line parsing,
			initialization.

TopLevel.py		The top level menu.  This has a button for
			each view, plus some utility buttons that
			affect the entire document or editor.

Player.py		The player, or presentation view.  This lets
			you play, pause and stop the presentation.
			It also lets you edit the attributes of the
			root node, but this is not particularly useful.

BlockView.py		The block view (or hierarchy view, as the
			users know it).  This displays the tree
			structure and lets you edit it.

ChannelView.py		The channel view (or time chart, as the users
			know it).  This displays channels, leaf nodes
			and sync arcs and lets you edit them.

StyleSheet.py		A dialog box that lets you edit the style
			dictionary.  Currently you can add, rename and
			delete styles, but you can't edit them; for
			that I still need to make a "style" wrapper
			in ../lib/AttrEdit.py.

Help.py			Help window.

ChannelMap.py		Easily-edited module that knows the mapping
			from channel names to classes implementing
			them.

Timing.py		A module that knows how to interpret sync arcs
			and how to get a node's duration.  This is
			used to compute start and end times for all
			nodes in a tree, and to prepare the tree for
			the player.

ViewDialog.py		Helper class for views that need to save their
			window position as a root node attribute.

NodeInfo.py		Dialog displaying essentials about a node.

NodeEdit.py		Pop-up dialog to fire up a separate editor
			appropriate for a node's media type.

AttrEdit.py		Dialog displaying an object's attributes
			(node, channel or style).

ArcInfo.py		Dialog displaying essentials about a sync arc.

Channel.py		Base class for all channels.  Defines the
			interface to a channel and implements a null
			channel.

ChannelWindow.py	Base class for channel windows.

NullChannel.py		Null channel class.  (This is just a renaming
			of Channel, which already implements dummy
			versions of all methods.)

TextChannel.py		Text channel class.  Can display ASCII files
			or text specified by 'imm' nodes.

SoundChannel.py		Sound channel class.  This uses the new SGI
			audio board and library, available in IRIX 4.0
			only, on the Indigo and 4D/35 machines only.
			It understands AIFF sound files (see
			recordaiff(1)) but also understands sound
			files created by my tools on the 4D/25 (for
			how much longer?).

ImageChannel.py		Image channel class.  Currently displays SGI
			images files only (*.rgb).

MovieChannel.py		Movie (video) channel class.  Currently
			displays files in a format unique to CMIF.

rtpool.py		Helper for the player: keeps a pool of "arm"
			actions that might be done ahead of time.


Form source files
-----------------

These files form an essential part of the CMIF editor sources!

They can be edited with fdesign (part of FORMS) or (in urgent cases)
with a text editor -- they're in a pretty obvious format.

ArcInfoForm.fd		Used by ArcInfo.py
HelpForm.fd		Used by Help.py
NodeEditForm.fd		Used by NodeEdit.py
NodeInfoForm.fd		Used by NodeInfo.py
PlayerForm.fd		Used by Player.py


Things to do
------------

First see the BUGS file.

One of the most obvious requirements is to give the channels more
functionality (like support for structured and multi-line text in the
text channel).  This is quite boring -- but it has to be done.

Creating an integrated editor for text objects is more of a challenge.

Turning the player into something in which you can actually edit the
structure of the document (if it is not too complicated) is a
three-starred exercise.

Another original goal of the project is portability.  With the current
set-up we can forget that: FORMS requires GL in RGB mode, the sound
channel requires Indigo or 4D/35 sound, etc.  About the only
parametrization left is screen size (Indigo: 1024 x 768, 4D/35: 1280 x
1024), but that's pretty boring.

However, an interesting exercise in heterogeneity, and not too hard,
would be to create a viewing-only version that runs on a Sparc.  This
might use STDWIN instead of GL and FORMS, and use some C programs to
convert audio and image files.  With some patience it might even be
portable to the Mac!
