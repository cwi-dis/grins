package com.oratrix.client;

import java.awt.*;
import java.awt.event.*;
import java.applet.*;

import java.io.*;
import java.net.*;

public class GRiNSAutomationApplet extends Applet
implements CMLMediator, ActionListener
{
    // GRiNS Player address
	private String server;
	private int serverport;
    
    // do we have a socket connection?
	private boolean connected=false;

    // socket stream variables
	private Socket socket;
	private OutputStream outputStream;
	
	// stream reader
	private XMLStreamReader reader;
    
    // cache doc base
   	private URL docBase;

	public void init()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(null);
		setSize(500,220);
		label1.setText("URL:");
		add(label1);
		label1.setBounds(16,12,52,24);
		add(textField1);
		textField1.setBounds(84,12,324,24);
		buttonOpen.setLabel("Open");
		add(buttonOpen);
		buttonOpen.setBackground(java.awt.Color.lightGray);
		buttonOpen.setBounds(420,12,60,24);
		buttonPlay.setLabel("Play");
		add(buttonPlay);
		buttonPlay.setBackground(java.awt.Color.lightGray);
		buttonPlay.setBounds(84,60,60,24);
		buttonPause.setLabel("Pause");
		add(buttonPause);
		buttonPause.setBackground(java.awt.Color.lightGray);
		buttonPause.setBounds(216,60,60,24);
		buttonStop.setLabel("Stop");
		add(buttonStop);
		buttonStop.setBackground(java.awt.Color.lightGray);
		buttonStop.setBounds(348,60,60,24);
		add(textArea1);
		textArea1.setBounds(16,144,476,64);
		label2.setText("Debug messages:");
		add(label2);
		label2.setBounds(16,120,108,20);
		//}}
		
		getParameters();
	}
	
	//{{DECLARE_CONTROLS
	java.awt.Label label1 = new java.awt.Label();
	java.awt.TextField textField1 = new java.awt.TextField();
	java.awt.Button buttonOpen = new java.awt.Button();
	java.awt.Button buttonPlay = new java.awt.Button();
	java.awt.Button buttonPause = new java.awt.Button();
	java.awt.Button buttonStop = new java.awt.Button();
	java.awt.TextArea textArea1 = new java.awt.TextArea();
	java.awt.Label label2 = new java.awt.Label();
	//}}
	
    // Ovveride Applet.start
	public void start() {
	    connect();
    }
    // Ovveride Applet.stop
	public void stop() {
	    disconnect();
	}
    
    public void actionPerformed(ActionEvent event){
		Object object = event.getSource();
		if (object == buttonOpen)
			openDocument(textField1.getText());
		else if (object == buttonPlay)
			playDocument();
		else if (object == buttonPause)
			pauseDocument();				
		else if (object == buttonStop)
			stopDocument();
    }
    
	private void message(String str) {
	    textArea1.append(str+"\n");
	}
	
	private void errormessage(String str) {
	    message(str);
	}
    
	private void getParameters() {
		docBase = getDocumentBase();
		server = getCodeBase().getHost();
		if(server==null || server.length()==0) server="localhost";
		serverport = 5001;
		String strport = getParameter("port");
		if(strport!=null){
		    try {  
			    serverport =  Integer.parseInt(strport.trim());
		    }
		    catch(NumberFormatException e) {  
			    serverport = 5001; 
		    }
		}
		connected = false;
	}
    
	public void connect() {
		message("Connecting to host "+ server + ":" + serverport);	
		if(!connected)
		    connected = doConnect();
		if(connected) { 
		    reader = new XMLStreamReader(this, socket, docBase);
			reader.start();
		}
	}
    
	public void disconnect() {
	    if(reader!=null)
	        reader.stop();
	    try {
	        if(socket!=null) {
	            Socket temp = socket;
	            socket = null;
	            outputStream = null;
	            temp.close();
	        }
	    }
	    catch(IOException e) {
	        errormessage("IOException" + e);
	    }
	    reader = null;
	    connected = false;
	}
   
   public void openDocument(String src){
        sendcmd("<open src=\"" + src + "\"/>\n");   
   }
   
   public void playDocument(){
        sendcmd("<play/>\n");  
   }
   
   public void stopDocument(){
        sendcmd("<stop/>\n");   
   }
   
   public void pauseDocument(){
        sendcmd("<pause/>\n");   
   }
   
   
	private boolean doConnect() {
		try {
			socket = new Socket(server, serverport);
		}
		catch(Throwable e){
			errormessage("Failed to connect.");
			socket = null;
			return false;
		}
		try {
		    outputStream = socket.getOutputStream();
		}
		catch(Throwable e){
		    outputStream = null;
			errormessage("Failed to connect.");
		}
		if(outputStream == null){
		    stop();
		    return false;
		}
		message("Connected.");
		return true;
	}
	
	
    // Implement CMLMediator interface
    
    // sender part
	public void sendcmd(String str) {
	    if(!connected || outputStream==null || str==null || str.length()==0) return;
	    byte buf[] = EuLocal.getBytes(str);
		try {
			outputStream.write(buf, 0, buf.length);
		}
		catch(Exception e){errormessage("Error " + e);}
	}
      
    // receiver part
    public void response(String cmdid, String msg){
    }
    
    public void sessionEnd(){
        if(socket!=null){
            disconnect();
            message("Disconnected.");
        }        
    }
    
    public void errorMsg(String msg){
        errormessage(msg);
    }
	

   // helpers
   private String xmlquote(String str) {
        StringBuffer sb = new StringBuffer();
        for(int i=0;i<str.length();i++) {
            char ch = str.charAt(i);
            if(ch=='<') sb.append("&lt;");
            else if(ch=='>') sb.append("&gt;");
            else if(ch=='&') sb.append("&amp;");
            else sb.append(ch);
        }
        return sb.toString();
    }
	
}
