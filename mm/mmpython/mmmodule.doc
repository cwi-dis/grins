This is a first cut at documenting the MM module.  This document isn't
finished yet.
[ Comments are placed in square brackets. ]

Interface.
==========

The mm module can be used to create threads for CMIF channels.  Each
object that is created by using the init() function represents two
extra threads.  One thread is used for arming a CMIF channel, the
other thread is used for playing the channel.  Below is a list of the
functions and methods that are implemented by the mm module.

Apart from the mm module, a specific channel module is also needed.
The (opaque) object that is got from the init() function in the
channel module must be given to the mm.init() function as first
argument.  Using this object, the mm module knows which functions to
call for channel-specific tasks.

Functions and Methods of MM.
============================

setsyncfd(fd)
	Set a file descriptor on which a byte is written to indicate
	that an event has happened.  The byte that is written consists
	of two parts.  The upper six bits are the event as specified
	in the init() function, the lower two bits are the value.  See
	init() for more details.

obj = init(chanobj, ev, attrdict)
	Initialization routine.  Chanobj is a channel object which
	identifies the channel.  Ev is an event number.  Whenever
	something 'interesting' happens the raw channel writes a byte
	to the file descriptor specified with setsyncfd to signal this
	fact to the main thread.  The value of the event will be one
	of the following:
	ARMDONE - when the current arm is done
	PLAYDONE - when the current file has finished playing

	Attrdict is a dictionary object specifying things like
	background color, window id, etc.  Exactly what attributes are
	needed depends on the channel.


The following functions are methods of the object returned by init().

close()
	Stops the channel, closes the window (if there is one).
	Note: disabling a channel is done through this mechanism as
	  well. The python wrapper will have to take care of timing
	  dependencies.

resized(x, y, w, h)
	Called when the main loop notices that the window has changed
	size or has to be redrawn.  The arguments are the x and y
	coordinates of the top-left corner and the width and height of
	the window.

arm(file, delay, duration, attrdict, anchorlist, synchronous)
	Prepare to play file 'file' next, and try to have it done
	within 'delay seconds.  'duration' is an estimate of how long
	the arm operation will take.  These parameters are only used
	to influence scheduling decisions.  An arm may be scheduled
	before the previous play is finished.  Attrdict is again a
	dictionary of attributes like in the init call.  Anchorlist is
	a list of tuples where each tuple describes (in a channel
	dependent way) how and where to show an anchor.  Synchronous
	indicates whether arming should be synchronous or not.  If
	arming is done synchronously, no event will be generated to
	indicate that the arm finished.  The synchronous parameter is
	optional and defaults to 0.  [ Note: the current channels do
	not use delay, duration, or anchorlist. ]

armstop()
	Stop arming.  This method should be called to stop an arm that
	is in progress when the main thread decides that the node will
	not be played after all.  When the arm is stopped an ARMDONE
	will be generated.  It is not an error to call this method
	when no arm is in progress.

play()
	Start playing the armed node.  Calling play before the ARMDONE
	event is received is an error, to help in detecting
	programming errors.

playstop()
	Stop playing.  A PLAYDONE event is generated when the node
	stops playing.

setrate(rate)
	Set the playing rate to the given value.  Takes effect
	immedeately.  If the rate is 0, playing of the node is paused.

finished()
	Called when the node is finished and any node-related data may
	be released.  This will also clear the window, if there is
	one.  This can only be called when not playing anymore.

do_display()
	Draw the new frame.  This is used when the player thread
	cannot draw because the underlying window system library can't
	handle multiple threads drawing to the same window.

Functions and Methods of the Channel Module.
============================================

The channel module should implement one function, init(), which takes
no arguments and which returns an object which can be given to
mm.init().  There are no other python-callable functions.

Interface between MM and Channel Module.
========================================

The object which is returned by the channel module must have the type
"channelobject" (see include file mmmodule.h).  This object contains a
pointer "chan_funcs" which should point to a (static) structure with
the type "struct mmfuncs".  The name of the object ("tp_name" in the
variable with type "typeobject") should start with the string
"channel:".  This string is used by mm to check the type of the object
which was passed to it.

The mmfuncs structure consists of pointers to functions.  These
pointers should be filled in by the channel module.  The pointers
point to the functions that do the actual channel-specific work.

As a template, use the file "nullchannelmodule.c".  A somewhat more
complicated example can be found in "soundchannelmodule.c".

Implementation.
===============

Programming several co-operating threads is always complicated.  There
are many places where the threads have to synchronize or where threads
must have exclusive access to certain variables.  This is no different
in the mm module.

This module starts up two new threads per object.  One thread is the
"arm" thread, the other is the "play" thread.  The "arm" thread runs
the routine mm_armer() while the "play" thread runs the routine
mm_player().  All other routines in mmmodule.c are only called by the
main thread.  When nothing is being armed or played, both threads are
waiting trying to acquire a lock (mm_armlock and mm_playlock
respectively).  These locks are held by the main thread, but they are
released when arming or playing must take place, thus enabling the arm
or play threads to acquire the lock.

The interface between the mm module and the channel-specific module is
through a structure containing pointers to functions.  The interface
functions correspond to the list of functions mentioned above.

The mmobject structure.

The mmobject structure consists of the following fields.

mm_ev		The event number which is used to signal certain
		events to the main thread through the file descriptor
		that was set with setsyncfd.  This value is not
		interpreted by the mm module.
mm_flags	Flag values for the mm module.  The following flags
		are defined.
		ARMING		The arm thread is running.
		PLAYING		The play thread is running.
		PAUSING		The play thread is pausing (not
				implemented this way).
		EXIT		The arm and play threads should exit.
				This is used when the object is being
				deallocated.
		STOPPLAY	The channel must stop playing.
		STOPARM		The channel must stop arming.
		ARMED		The channel has finished arming.
		SYNCARM		The arm is synchronous.
		ARMTHREAD	An arm thread exists.
		PLAYTHREAD	A play thread exists.
mm_flagsema	This is a semaphore that is used to serialize access to
		mm_flags.  Since the arm and play threads must look at
		mm_flags, and may even have to change mm_flags, a
		mechanism is needed to prevent race conditions.
mm_attrdict	A python dictionary which contains channel-specific
		attributes.  This is used by the channel-specific
		code.
mm_armsema	The main thread does a down on this semaphore  before the
		arm thread is started.  When the arm thread is
		started, it tries to do a down on the semaphore and
		will block in the process.  When mm_arm() is called to
		arm the channel, it does an up on the semaphore after
		the channel-specific arm routine has finished.  The
		arm thread can then complete the down.  When the arm
		thread is done, it tries again to do a down on the
		semaphore without first doing an up.  This will block
		the thread until the main thread does the next up in
		the next call to mm_arm.
mm_playsema	This semaphore does for the play thread what mm_armsema
		does for the arm thread.
mm_exitsema	When the mm object is being deallocated, the main
		thread signals the other threads that they have to
		exit.  It then does two downs on this semaphore.  The
		arm and play threads perform ups on the semaphore just
		before finally exiting.  After both ups, the main
		thread can continue and free all memory that belongs
		to the mm object.
mm_private	A pointer to channel-specific data.  The pointed-to
		memory must be allocated by the channel-specific
		initialization routine and should be freed by the
		channel-specific dealloc routine.

The mmfuncs structure.

The mmfuncs structure contains pointers to functions that do the
channel-specific work.  The following functions are defined.
Apart from armer, player, and dealloc, all functions should return 1
when they are successful and 0 when they fail.  When they fail, they
must already have called one of the err_* functions before they
return, so that the proper exception can be raised.
Armer, player, and dealloc don't return a value.

armer(mmobject *)
		Together with the function arm, this function does the
		word needed to arm the channel.  First, arm is called,
		and when it finishes, armer is called.  Armer runs in
		the arm thread, while arm runs in the main thread.
		Armer can do the part of arming that can take some
		time, like reading from a file.  When arming is
		finished, armer should return.
player(mmobject *)
		Together with the function play, this function does
		the work needed to play a node on the channel.  First,
		play is called, and when it finishes, player is
		called.  Play should not take long, since many
		channels may have to be started at the same time.
		Player runs in the play thread, while play runs in the
		main thread.
		Player is supposed to do the real work, play should
		only do some initialization.  When playing is
		finished, player should return.
resized(mmobject *, int, int, int, int)
		This function does the channel-specific work for the
		resized method.
arm(mmobject *, object *, int, int, object *, object *)
		This function is called to pass the arm parameters to
		the channel module.  After it finishes, the armer
		function will be called.
armstop(mmobject *)
		This function is called to signal the arm thread that
		it should stop arming.  In the current modules this
		function does not do anything.
play(mmobject *)
		This function is called when the channel should start
		playing.  After this function returns, the player
		function will be called to do the real work.
playstop(mmobject *)
		This function is called when playing has to stop.
finished(mmobject *)
setrate(mmobject *, double)
init(mmobject *)
		Initialize the channel-specific data.  This function
		is called, once, before any of the other functions.
dealloc(mmobject *)
		Called to deallocate the channel-specific data.  After
		this function was called, no other function will be
		called anymore.
do_display(mmobject *)
