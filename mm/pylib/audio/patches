Index: Modules/audioop.c
===================================================================
RCS file: /ufs/sjoerd/.CVSroot/python/Modules/audioop.c,v
retrieving revision 1.22
diff -c -r1.22 audioop.c
*** audioop.c	1996/10/25 14:39:31	1.22
--- audioop.c	1997/02/04 10:31:30
***************
*** 777,783 ****
      object *args;
  {
      signed char *cp1, *cp2, *ncp;
!     int len1, len2, size, val1, val2;
      object *rv;
      int i;
  
--- 777,783 ----
      object *args;
  {
      signed char *cp1, *cp2, *ncp;
!     int len1, len2, size, val1, val2, newval, maxval;
      object *rv;
      int i;
  
***************
*** 794,799 ****
--- 794,803 ----
  	err_setstr(AudioopError, "Size should be 1, 2 or 4");
  	return 0;
      }
+ 
+     if (size == 1) maxval = 127;
+     else if (size == 2) maxval = 32767;
+     else if (size == 4) maxval = 2147483647;
      
      rv = newsizedstringobject(NULL, len1);
      if ( rv == 0 )
***************
*** 810,818 ****
  	else if ( size == 2 ) val2 = (int)*SHORTP(cp2, i);
  	else if ( size == 4 ) val2 = (int)*LONGP(cp2, i);
  
! 	if ( size == 1 )      *CHARP(ncp, i) = (signed char)(val1+val2);
! 	else if ( size == 2 ) *SHORTP(ncp, i) = (short)(val1+val2);
! 	else if ( size == 4 ) *LONGP(ncp, i) = (long)(val1+val2);
      }
      return rv;
  }
--- 814,829 ----
  	else if ( size == 2 ) val2 = (int)*SHORTP(cp2, i);
  	else if ( size == 4 ) val2 = (int)*LONGP(cp2, i);
  
! 	newval = val1 + val2;
! 	/* truncate in case of overflow */
! 	if (newval > maxval) newval = maxval;
! 	else if (newval < -maxval) newval = -maxval;
! 	else if (size == 4 && (newval^val1) < 0 && (newval^val2) < 0)
! 		newval = val1 > 0 ? maxval : - maxval;
! 
! 	if ( size == 1 )      *CHARP(ncp, i) = (signed char)newval;
! 	else if ( size == 2 ) *SHORTP(ncp, i) = (short)newval;
! 	else if ( size == 4 ) *LONGP(ncp, i) = (long)newval;
      }
      return rv;
  }
***************
*** 932,937 ****
--- 943,1051 ----
      return rv;
  }
  
+ static PyObject *
+ audioop_ratecv(self, args)
+ 	PyObject *self;
+ 	PyObject *args;
+ {
+ 	char *cp, *ncp;
+ 	int len, size, nchannels, inrate, outrate, weightA, weightB;
+ 	int chan, d, *prev_i, *cur_i, cur_o;
+ 	PyObject *state, *samps, *str, *rv;
+ 
+ 	weightA = 1;
+ 	weightB = 0;
+ 	if (!PyArg_ParseTuple(args, "s#iiiiO|ii", &cp, &len, &size, &nchannels,
+ 			      &inrate, &outrate, &state, &weightA, &weightB))
+ 		return NULL;
+ 	if (size != 1 && size != 2 && size != 4) {
+ 		PyErr_SetString(AudioopError, "Size should be 1, 2 or 4");
+ 		return NULL;
+ 	}
+ 	if (nchannels < 1) {
+ 		PyErr_SetString(AudioopError, "# of channels should be >= 1");
+ 		return NULL;
+ 	}
+ 	if (weightA < 1 || weightB < 0) {
+ 		PyErr_SetString(AudioopError, "weightA should be >= 1, weightB should be >= 0");
+ 		return NULL;
+ 	}
+ 	if (len % (size * nchannels) != 0) {
+ 		PyErr_SetString(AudioopError, "not a whole number of frames");
+ 		return NULL;
+ 	}
+ 	prev_i = malloc(nchannels * sizeof(int));
+ 	cur_i = malloc(nchannels * sizeof(int));
+ 	len /= size * nchannels;	/* # of frames */
+ 
+ 	if (state == Py_None) {
+ 		d = -outrate;
+ 		for (chan = 0; chan < nchannels; chan++)
+ 			prev_i[chan] = cur_i[chan] = 0;
+ 	} else {
+ 		if (!PyArg_ParseTuple(state,
+ 				"iO!;audioop.ratecv: illegal state argument",
+ 				&d, &PyTuple_Type, &samps))
+ 			return NULL;
+ 		if (PyTuple_Size(samps) != nchannels) {
+ 			PyErr_SetString(AudioopError, "illegal state argument");
+ 			return NULL;
+ 		}
+ 		for (chan = 0; chan < nchannels; chan++) {
+ 			if (!PyArg_ParseTuple(PyTuple_GetItem(samps, chan),
+ 					      "ii",&prev_i[chan],&cur_i[chan]))
+ 				return NULL;
+ 		}
+ 	}
+ 	str = PyString_FromStringAndSize(NULL, size * nchannels * (len * outrate + inrate - 1) / inrate);
+ 	if (str == NULL)
+ 		return NULL;
+ 	ncp = PyString_AsString(str);
+ 
+ 	for (;;) {
+ 		while (d < 0) {
+ 			if (len == 0) {
+ 				samps = PyTuple_New(nchannels);
+ 				for (chan = 0; chan < nchannels; chan++)
+ 					PyTuple_SetItem(samps, chan,
+ 						Py_BuildValue("(ii)",
+ 							      prev_i[chan],
+ 							      cur_i[chan]));
+ 				if (PyErr_Occurred())
+ 					return NULL;
+ 				if (_PyString_Resize(&str,
+ 					ncp - PyString_AsString(str)) < 0)
+ 					return NULL;
+ 				rv = Py_BuildValue("(O(iO))", str, d, samps);
+ 				Py_DECREF(samps);
+ 				Py_DECREF(str);
+ 				return rv;
+ 			}
+ 			for (chan = 0; chan < nchannels; chan++) {
+ 				prev_i[chan] = cur_i[chan];
+ 				if (size == 1)      cur_i[chan] = ((int)*CHARP(cp, 0)) << 8;
+ 				else if (size == 2) cur_i[chan] = (int)*SHORTP(cp, 0);
+ 				else if (size == 4) cur_i[chan] = ((int)*LONGP(cp, 0)) >> 16;
+ 				cp += size;
+ 				/* implements a simple digital filter */
+ 				cur_i[chan] = (weightA * cur_i[chan] + weightB * prev_i[chan]) / (weightA + weightB);
+ 			}
+ 			len--;
+ 			d += outrate;
+ 		}
+ 		while (d >= 0) {
+ 			for (chan = 0; chan < nchannels; chan++) {
+ 				cur_o = (prev_i[chan] * d + cur_i[chan] * (outrate - d)) / outrate;
+ 				if (size == 1)      *CHARP(ncp, 0) = (signed char)(cur_o >> 8);
+ 				else if (size == 2) *SHORTP(ncp, 0) = (short)(cur_o);
+ 				else if (size == 4) *LONGP(ncp, 0) = (long)(cur_o<<16);
+ 				ncp += size;
+ 			}
+ 			d -= inrate;
+ 		}
+ 	}
+ }
+ 
  static object *
  audioop_lin2ulaw(self, args)
      object *self;
***************
*** 1229,1234 ****
--- 1343,1349 ----
      { "tostereo", audioop_tostereo },
      { "getsample", audioop_getsample },
      { "reverse", audioop_reverse },
+     { "ratecv", audioop_ratecv, 1 },
      { 0,          0 }
  };
  
Index: Doc/libaudioop.tex
===================================================================
RCS file: /ufs/sjoerd/.CVSroot/python/Doc/libaudioop.tex,v
retrieving revision 1.4
diff -c -r1.4 libaudioop.tex
*** libaudioop.tex	1995/03/17 16:06:02	1.4
--- libaudioop.tex	1997/02/04 13:11:55
***************
*** 146,151 ****
--- 146,162 ----
  silently ignored.
  \end{funcdesc}
  
+ \begin{funcdesc}{ratecv}{fragment\, width\, nchannels\, inrate\, outrate\, state\optional{\, weightA\, weightB}}
+ Convert the frame rate of the input fragment.
+ 
+ \code{State} is a tuple containing the state of the converter.  The
+ converter returns a tupl \code{(\var{newfragment}, \var{newstate})},
+ and \var{newstate} should be passed to the next call of ratecv.
+ 
+ The \code{weightA} and \coden{weightB} arguments are parameters for a
+ simple digital filter and default to 1 and 0 respectively.
+ \end{funcdesc}
+ 
  \begin{funcdesc}{reverse}{fragment\, width}
  Reverse the samples in a fragment and returns the modified fragment.
  \end{funcdesc}
Index: Lib/test/test_audioop.py
===================================================================
RCS file: /ufs/sjoerd/.CVSroot/python/Lib/test/test_audioop.py,v
retrieving revision 1.1
diff -c -r1.1 test_audioop.py
*** test_audioop.py	1994/01/12 09:55:09	1.1
--- test_audioop.py	1997/02/04 13:55:02
***************
*** 131,136 ****
--- 131,142 ----
  		return 0
  	return 1
  
+ def testratecv(data):
+ 	state = (-8000, ((256, 512),))
+ 	if audioop.ratecv(data[0], 1, 1, 8000, 16000, state) != ('\001\000\000\001\001\002', state):
+ 		return 0
+ 	return 1
+ 
  def testreverse(data):
  	if audioop.reverse(data[0], 1) <> '\2\1\0':
  		return 0
