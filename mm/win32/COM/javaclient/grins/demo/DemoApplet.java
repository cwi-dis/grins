
package grins.demo;

import java.awt.*;
import java.awt.event.*;
import java.applet.*;
import java.io.*;

import grins.*;
import javax.swing.JSlider;

public class DemoApplet extends Applet
implements SMILListener
{
    private Frame frame = null;
    
    private SMILDocument smil;
    private SMILController player;
    
    private Viewport viewport;
    private boolean dragging = false;
    private int currstate = 0;
    
	public void init()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(null);
		setSize(480,168);
		buttonOpen.setLabel("Open");
		add(buttonOpen);
		buttonOpen.setBackground(java.awt.Color.lightGray);
		buttonOpen.setBounds(368,8,104,28);
		labelOpen.setText("Open:");
		add(labelOpen);
		labelOpen.setBounds(12,12,40,24);
		add(textFieldURL);
		textFieldURL.setBounds(57,8,311,28);
		buttonPlay.setLabel("Play");
		add(buttonPlay);
		buttonPlay.setBackground(java.awt.Color.lightGray);
		buttonPlay.setBounds(8,56,104,28);
		buttonPause.setLabel("Pause");
		add(buttonPause);
		buttonPause.setBackground(java.awt.Color.lightGray);
		buttonPause.setBounds(128,56,104,28);
		buttonStop.setLabel("Stop");
		add(buttonStop);
		buttonStop.setBackground(java.awt.Color.lightGray);
		buttonStop.setBounds(248,56,104,28);
		buttonClose.setLabel("Close");
		add(buttonClose);
		buttonClose.setBackground(java.awt.Color.lightGray);
		buttonClose.setBounds(368,56,104,28);
		JSlider1.setPaintTicks(true);
		JSlider1.setMajorTickSpacing(4);
		JSlider1.setToolTipText("Seek");
		JSlider1.setMinorTickSpacing(1);
		JSlider1.setValue(0);
		add(JSlider1);
		JSlider1.setBounds(8,100,464,32);
		buttonGetInfo.setLabel("Document info");
		add(buttonGetInfo);
		buttonGetInfo.setBackground(java.awt.Color.lightGray);
		buttonGetInfo.setBounds(8,138,102,20);
		labelLicense.setText("License");
		add(labelLicense);
		labelLicense.setBounds(130,138,54,20);
		add(textFieldLicense);
		textFieldLicense.setBounds(184,138,286,20);
		//}}
	
		//{{REGISTER_LISTENERS
		SymAction lSymAction = new SymAction();
		buttonOpen.addActionListener(lSymAction);
		buttonPlay.addActionListener(lSymAction);
		buttonPause.addActionListener(lSymAction);
		buttonStop.addActionListener(lSymAction);
		buttonClose.addActionListener(lSymAction);
		SymMouseMotion aSymMouseMotion = new SymMouseMotion();
		JSlider1.addMouseMotionListener(aSymMouseMotion);
		SymMouse aSymMouse = new SymMouse();
		JSlider1.addMouseListener(aSymMouse);
		buttonGetInfo.addActionListener(lSymAction);
		//}}
	}
	
	//{{DECLARE_CONTROLS
	java.awt.Button buttonOpen = new java.awt.Button();
	java.awt.Label labelOpen = new java.awt.Label();
	java.awt.TextField textFieldURL = new java.awt.TextField();
	java.awt.Button buttonPlay = new java.awt.Button();
	java.awt.Button buttonPause = new java.awt.Button();
	java.awt.Button buttonStop = new java.awt.Button();
	java.awt.Button buttonClose = new java.awt.Button();
	javax.swing.JSlider JSlider1 = new javax.swing.JSlider();
	java.awt.Button buttonGetInfo = new java.awt.Button();
	java.awt.Label labelLicense = new java.awt.Label();
	java.awt.TextField textFieldLicense = new java.awt.TextField();
	//}}
	
	private void message(String str) {
	    System.out.println(str);
	}
	
	public void start() {
	    }
	public void stop() {
	    if(smil!=null) smil.close();
	    }
    public void destroy() {
        }
    public void setWaiting(){
        setCursor(new Cursor(Cursor.WAIT_CURSOR));
    }
    public void setReady(){
       setCursor(Cursor.getDefaultCursor());
    }
	  
	// standalone execution support
    public static void main(String args[]) 
		{
	    class SFrame extends Frame {
	        SFrame(String title){
	            super(title);
	            }
	        void setApplet(Applet p){
	            applet = p;
	            }
	        private Applet applet;
	        }
		SFrame frame = new SFrame("Java GRiNS Player");
		frame.addWindowListener(
			new WindowAdapter() { 
				public void windowClosing(WindowEvent event) {
				    ((SFrame)event.getWindow()).applet.stop();
				    try{Thread.sleep(1000);}catch(Exception e){}
			        System.exit(0);
			        }
				});
	
		DemoApplet	demoApplet = new DemoApplet();
        frame.setApplet(demoApplet);
		demoApplet.init();
		demoApplet.start();
		frame.add("Center", demoApplet);
        frame.pack();
		frame.setSize(480+8,168+24);
		frame.setLocation(400,300);
		frame.show();
		}
	

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == buttonOpen)
				buttonOpen_ActionPerformed(event);
			else if (object == buttonPlay)
				buttonPlay_ActionPerformed(event);
			else if (object == buttonPause)
				buttonPause_ActionPerformed(event);
			else if (object == buttonStop)
				buttonStop_ActionPerformed(event);
			else if (object == buttonClose)
				buttonClose_ActionPerformed(event);
			else if (object == buttonGetInfo)
				buttonGetInfo_ActionPerformed(event);
			
			
		}
	}

	void buttonOpen_ActionPerformed(java.awt.event.ActionEvent event)
	{
		FileDialog dlg = new FileDialog((Frame)getParent(), "Select presentation", FileDialog.LOAD);
		dlg.show();
		String filename = dlg.getFile();
		if(filename!=null){
		    String dir  = dlg.getDirectory();
		    String absFilename = dir+filename;
		    textFieldURL.setText(absFilename);
		    open(absFilename);
		}
	}

    private void open(String filename){
        
        // destroy previous
        if(player!=null) player.stop();
        if(smil!=null) smil.close();
        if(viewport!=null){
            viewport.setVisible(false);
            viewport.dispose();
            viewport = null;
            }
	    JSlider1.setValue(0);
	    
        // create SMIL doc
        String license = textFieldLicense.getText();
	    smil = GRiNSToolkit.createDocument(filename, license);
	    	    
	    // update create UI
	    setSliderDur(smil.getDuration());
	    SMILCanvas canvas = new SMILCanvas();
	    viewport = new Viewport(canvas);
	    viewport.update(smil.getViewportSize(0));
	   
	    // set SMIL canvas
	    try {smil.getRenderer().setCanvas(0, canvas);}
	    catch(Exception e){System.out.println(""+e);}
	    
	    // get controller
        player = smil.getController();
        player.addListener(this);
    }
    
    void setSliderDur(double dur){
        if(dur<0 || dur==0)
            JSlider1.setVisible(false);
        else
            {
            JSlider1.setVisible(true);
            int intdur = (int)dur;
            if(dur -intdur>0) intdur = (int)(dur+1.0);
            JSlider1.setMaximum(intdur);
            }
    }
    
    // interface SMILListener implementation
    public void setPos(double pos){
        if(!dragging && JSlider1.isVisible() && currstate == SMILListener.PLAYING)
            JSlider1.setValue((int)(pos+0.5));
    }
    public void setState(int state){
        currstate = state;
    }
	public void updateViewports(){
	}
    
	void buttonPlay_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
		if(player!=null) player.play();
	}

	void buttonPause_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
		if(player!=null) player.pause();
	}

	void buttonStop_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
		if(player!=null) player.stop();
		JSlider1.setValue(0);
	}

	void buttonClose_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
		if(smil!=null) smil.close();
        if(viewport!=null){
            viewport.setVisible(false);
            viewport.dispose();
            viewport = null;
            JSlider1.setValue(0);
        }
	}

	class SymMouseMotion extends java.awt.event.MouseMotionAdapter
	{
		public void mouseDragged(java.awt.event.MouseEvent event)
		{
			Object object = event.getSource();
			if (object == JSlider1)
				JSlider1_mouseDragged(event);
		}
	}

	void JSlider1_mouseDragged(java.awt.event.MouseEvent event)
	{
	    dragging = true;
		// to do: code goes here.
			 
	}

	class SymMouse extends java.awt.event.MouseAdapter
	{
		public void mouseReleased(java.awt.event.MouseEvent event)
		{
			Object object = event.getSource();
			if (object == JSlider1)
				JSlider1_mouseReleased(event);
		}
	}

	void JSlider1_mouseReleased(java.awt.event.MouseEvent event)
	{
		// to do: code goes here.
		if(dragging){
		    if(player!=null) player.setTime(JSlider1.getValue());
	        dragging = false;
		}
			 
	}

	void buttonGetInfo_ActionPerformed(java.awt.event.ActionEvent event)
	{
	    double currTime = player.getTime();
	    if(player!=null) System.out.println("t="+currTime);
	    if(smil!=null)   System.out.println("dur="+smil.getDuration());
	    if(smil!=null)   System.out.println("frameRate="+smil.getFrameRate());
	}
}
