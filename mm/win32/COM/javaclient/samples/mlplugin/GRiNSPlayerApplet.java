
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

import java.util.Vector;

import grins.*;

public class GRiNSPlayerApplet extends JApplet
implements SMILListener, TimerListener
{
    class InternalFrame extends JInternalFrame {
        public InternalFrame(String title, int id){
            super(title, false, true, false, false); 
            this.id = id;
        }
        int getID(){return id;}
        private int id;
    };
    
    private SMILDocument smil;
    private SMILController player;
    private Vector viewports = new Vector();
    
    private JDesktopPane desktop;
    
    private String smilSrc="";
    private int iframedw = 0;
    private int iframedh = 0;
    private int nextx = 4;
    private int nexty = 8;
    
    
	public void init()
	{
		// This line prevents the "Swing: checked access to system event queue" message seen in some browsers.
		getRootPane().putClientProperty("defeatSystemEventQueueCheck", Boolean.TRUE);
		
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		getContentPane().setLayout(null);
		setSize(798,600);
		getContentPane().add(JToolBar1);
		JToolBar1.setBounds(0,0,800,26);
		JButtonOpen.setDefaultCapable(false);
		JToolBar1.setFloatable(false);
		JToolBar1.setAlignmentY(0.192308F);
		
		JButtonOpen.setToolTipText("Open document");
		JButtonOpen.setText(" Open... ");
		JButtonOpen.setActionCommand(" Open... ");
		JToolBar1.add(JButtonOpen);
		JButtonOpen.setBounds(2,2,79,22);
		JButtonClose.setDefaultCapable(false);
		//JButtonOpen.setBounds(16,2,59,24);
		
		JButtonClose.setToolTipText("Close document");
		JButtonClose.setText(" Close ");
		JButtonClose.setActionCommand(" Close ");
		JToolBar1.add(JButtonClose);
		JButtonClose.setBounds(81,2,73,22);
		JButtonPlay.setDefaultCapable(false);
		//JButtonClose.setBounds(75,2,71,24);
		
		JToolBar1.addSeparator();
		
		JButtonPlay.setToolTipText("Play document");
		JButtonPlay.setText(" Play ");
		JButtonPlay.setActionCommand(" Play ");
		JToolBar1.add(JButtonPlay);
		JButtonPlay.setBounds(154,2,65,22);
		JButtonPause.setDefaultCapable(false);
		//JButtonPlay.setBounds(146,2,61,24);
		
		JButtonPause.setToolTipText("Pause document");
		JButtonPause.setText(" Pause ");
		JButtonPause.setActionCommand(" Pause ");
		JToolBar1.add(JButtonPause);
		JButtonPause.setBounds(219,2,77,22);
		JButtonStop.setDefaultCapable(false);
		//JButtonPause.setBounds(207,2,65,24);
		
		JButtonStop.setText(" Stop ");
		JButtonStop.setActionCommand(" Stop ");
		JToolBar1.add(JButtonStop);
		JButtonStop.setBounds(296,2,67,22);
		JButtonAbout.setDefaultCapable(false);
		//JButtonStop.setBounds(272,2,67,24);
		
		JToolBar1.addSeparator();
		
		JButtonAbout.setToolTipText("About GRiNS Player for Java 2");
		JButtonAbout.setText(" About GRiNS... ");
		JButtonAbout.setActionCommand(" About GRiNS... ");
		JToolBar1.add(JButtonAbout);
		//JButtonAbout.setBounds(363,2,121,22);
		
		getContentPane().add(JTextFieldStatus);
		JTextFieldStatus.setEditable(false);
		JTextFieldStatus.setText("");
		JTextFieldStatus.setBounds(0,574,800,26);
		//}}
		
	    desktop = new JDesktopPane();
	    getContentPane().add(desktop);
	    desktop.setBounds(0,26,800,600-52);
        desktop.setVisible(true);
        
        getParameters();
	
		//{{REGISTER_LISTENERS
		SymAction lSymAction = new SymAction();
		JButtonOpen.addActionListener(lSymAction);
		JButtonAbout.addActionListener(lSymAction);
		JButtonClose.addActionListener(lSymAction);
		JButtonPlay.addActionListener(lSymAction);
		JButtonPause.addActionListener(lSymAction);
		JButtonStop.addActionListener(lSymAction);
		//}}
	}
	
	//{{DECLARE_CONTROLS
	javax.swing.JToolBar JToolBar1 = new javax.swing.JToolBar();
	javax.swing.JButton JButtonOpen = new javax.swing.JButton();
	javax.swing.JButton JButtonClose = new javax.swing.JButton();
	javax.swing.JButton JButtonPlay = new javax.swing.JButton();
	javax.swing.JButton JButtonPause = new javax.swing.JButton();
	javax.swing.JButton JButtonStop = new javax.swing.JButton();
	javax.swing.JButton JButtonAbout = new javax.swing.JButton();
	javax.swing.JTextField JTextFieldStatus = new javax.swing.JTextField();
	//}}
	
	private void getParameters()
	    {
		smilSrc = getParameter("smilsrc");
		if(smilSrc!=null){
		    smilSrc.trim();
		    }
	    else smilSrc="";  
	    }	
	private void message(String str) {
	    System.out.println(str);
	}
	
	public void start(){
	    JButtonOpen.setEnabled(true);
	    JButtonClose.setEnabled(false);
	    JButtonPlay.setEnabled(false);
	    JButtonPause.setEnabled(false);
	    JButtonStop.setEnabled(false);
	}   
	
	public void stop() {
	    if(smil!=null) 
	        {
	        smil.close();	    
	        smil = null;
	        }
	    }
	    
    public void destroy() {
        }
        
    public void setWaiting(){
        setCursor(new Cursor(Cursor.WAIT_CURSOR));
    }
    public void setReady(){
       setCursor(Cursor.getDefaultCursor());
    }
	
	// SMILListener interface
    public void setPos(double pos){}
    public void setState(int state)
        {
        if(state==SMILListener.STOPPED)
            {
	        JButtonPlay.setEnabled(true);
	        JButtonPause.setEnabled(false);
	        JButtonStop.setEnabled(false);
            }
        }
        
	public void updateViewports(){
        Scheduler sc = new Scheduler(500, "updateViewports");
	    sc.addTimerListener(this);
	    }
	
	public void timeElapsed(TimerEvent evt){
	    int nv = smil.getViewportCount();
	    int n = viewports.size();
	    if(n<nv) 
	        {
	        for(int i=n;i<nv;i++) createViewport(i);
	        }
	        
	    // update viewports 
	    for(int i=0;i<nv;i++){
	        InternalFrame jif = (InternalFrame)viewports.elementAt(i);
	        int id = jif.getID();
	        if(!jif.isClosed() && !smil.isViewportOpen(id)){
	            //message("closing viewport "+ id);
                try {jif.setClosed(true);} catch(java.beans.PropertyVetoException e){}
                jif.dispose();
	            }
	        }
	    }
	
    private void open(String filename){
        
        // create SMIL doc
        String license = "";
        try {smil = GRiNSToolkit.createDocument(filename, license);}   
	    catch(GRiNSException e){smil = null;System.out.println(""+e);}
	    
	    // update create UI
	    double dur = smil.getDuration();
	    String str = " " +filename + "   (duration: ";
	    if(dur<0 || dur==0)
	        JTextFieldStatus.setText(str + "indefinite)");
	    else
	        JTextFieldStatus.setText(str + (int)(dur+0.5) + " secs)");
	    
	    int n = smil.getViewportCount();
	    for(int i =0; i<n; i++) createViewport(i);
	    
	    // get controller
        player = smil.getController();
        player.addListener(this);
    }
	
	private InternalFrame getInternalFrame(int id) {
	    int n = viewports.size();
	    for(int i=0;i<n;i++){
	        InternalFrame jif = (InternalFrame)viewports.elementAt(i);
	        if(jif.getID()==id) return jif;
	        }
	    return null;
	    }
	
	private void createViewport(int id){
	    if(getInternalFrame(id)!=null) return;
	    
	    //message("creating viewport " + id);
	    Dimension d = smil.getViewportSize(id);
	    String title = smil.getViewportTitle(id);
	    SMILCanvas  canvas = createTopLayout(id, d.width, d.height, title);
	    try {smil.getRenderer().setCanvas(id, canvas);}
	    catch(Exception e){System.out.println(""+e);}
	    }
	    
	private SMILCanvas createTopLayout(int id, int w, int h, String title){
		InternalFrame jif = new InternalFrame(title, id);
	    viewports.addElement(jif);
	    
	    if(id%2==0) nextx = 4;
        if((nextx+w+16)>800) nextx = 800-w-16;
        
	    jif.getContentPane().setLayout(null);
	    desktop.add(jif);  
	    jif.setBounds(nextx, nexty, w+iframedw, h+iframedh);
	    
	    //Canvas canvas = new Canvas();
	    SMILCanvas canvas =  new SMILCanvas();
	    jif.getContentPane().add(canvas);
	    canvas.setBackground(new java.awt.Color(0,0,0));
	    Rectangle rc = jif.getContentPane().getBounds();
	    canvas.setBounds(rc);
	    
	    if(iframedw==0 || iframedh==0){
	        iframedw = w - rc.width;
	        iframedh = h - rc.height;
	        jif.reshape(nextx, nexty, w+iframedw, h+iframedh);
	        canvas.setBounds(jif.getContentPane().getBounds());
	        }
	    jif.show();
	    
	    nextx += w + iframedw + 4;
	   
	    return canvas;
	}
	        
	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == JButtonOpen)
				JButtonOpen_actionPerformed(event);
			else if (object == JButtonAbout)
				JButtonAbout_actionPerformed(event);
			else if (object == JButtonClose)
				JButtonClose_actionPerformed(event);
			else if (object == JButtonPlay)
				JButtonPlay_actionPerformed(event);
			else if (object == JButtonPause)
				JButtonPause_actionPerformed(event);
			else if (object == JButtonStop)
				JButtonStop_actionPerformed(event);
		}
	}

	void JButtonOpen_actionPerformed(java.awt.event.ActionEvent event)
	{
		JDialogOpen dlg = new JDialogOpen();
		dlg.setText(smilSrc);
		dlg.setVisible(true);
		if(dlg.result!=0 && smilSrc!=null && smilSrc.length()>0){
		    smilSrc = dlg.text;
		    JTextFieldStatus.setText(" Opening docyment: " + smilSrc);
		    open(smilSrc);
	        JButtonOpen.setEnabled(false);
	        JButtonClose.setEnabled(true);
	        JButtonPlay.setEnabled(true);
	        JButtonPause.setEnabled(false);
	        JButtonStop.setEnabled(false);
		    
		}
	}

	void JButtonAbout_actionPerformed(java.awt.event.ActionEvent event)
	{
	    JDialogAbout dlg = new JDialogAbout();
		dlg.setVisible(true);	 
	}

	void JButtonClose_actionPerformed(java.awt.event.ActionEvent event)
	{
        if(player!=null) player.stop();	
        player = null;
        
	    if(smil!=null) smil.close();
        smil=null;
        
        int n = viewports.size();
        for(int i=0;i<n;i++){
            InternalFrame jif = (InternalFrame)viewports.elementAt(i);
            if(!jif.isClosed())
                {
                try {jif.setClosed(true);} catch(java.beans.PropertyVetoException e){}
                jif.dispose();
                }
            }
        viewports.clear();
        
        nextx = 4;
        nexty = 8;
        JButtonOpen.setEnabled(true);
	    JButtonClose.setEnabled(false);
	    JButtonPlay.setEnabled(false);
	    JButtonPause.setEnabled(false);
	    JButtonStop.setEnabled(false);
        JTextFieldStatus.setText(" ");
	}

	void JButtonPlay_actionPerformed(java.awt.event.ActionEvent event)
	{
		if(player!=null) player.play();
	     JButtonPlay.setEnabled(false);
	     JButtonPause.setEnabled(true);
	     JButtonStop.setEnabled(true);
			 
	}

	void JButtonPause_actionPerformed(java.awt.event.ActionEvent event)
	{
		if(player!=null) player.pause();
	     JButtonPlay.setEnabled(false);
	     JButtonPause.setEnabled(true);
	     JButtonStop.setEnabled(true);
			 
	}

	void JButtonStop_actionPerformed(java.awt.event.ActionEvent event)
	{
		if(player!=null) player.stop();
	     JButtonPlay.setEnabled(true);
	     JButtonPause.setEnabled(false);
	     JButtonStop.setEnabled(false);
			 
	}
}
