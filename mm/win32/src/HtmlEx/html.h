#ifndef __HTML_H__
#define __HTML_H__

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


// Dispatch interfaces referenced by this interface
class CDocInput;
class CDocOutput;
class CHTMLForms;
class COleFont;

/////////////////////////////////////////////////////////////////////////////
// CHTML wrapper class

class CHTML : public CWnd
{
protected:
	DECLARE_DYNCREATE(CHTML)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xb7fc355e, 0x8ce7, 0x11cf, { 0x97, 0x54, 0x0, 0xaa, 0x0, 0xc0, 0x9, 0x8 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:

// Operations
public:
	// method 'QueryInterface' not emitted because of invalid return type or parameter type
	unsigned long AddRef();
	unsigned long Release();
	// method 'GetTypeInfoCount' not emitted because of invalid return type or parameter type
	// method 'GetTypeInfo' not emitted because of invalid return type or parameter type
	// method 'GetIDsOfNames' not emitted because of invalid return type or parameter type
	// method 'Invoke' not emitted because of invalid return type or parameter type
	void AboutBox();
	CDocInput GetDocInput();
	CDocOutput GetDocOutput();
	CString GetUrl();
	CString GetRequestURL();
	CString GetBaseURL();
	CHTMLForms GetForms();
	long GetTotalWidth();
	long GetTotalHeight();
	long GetRetrieveBytesTotal();
	long GetRetrieveBytesDone();
	BOOL GetParseDone();
	BOOL GetLayoutDone();
	BOOL GetDeferRetrieval();
	void SetDeferRetrieval(BOOL bNewValue);
	BOOL GetViewSource();
	void SetViewSource(BOOL bNewValue);
	BOOL GetRetainSource();
	void SetRetainSource(BOOL bNewValue);
	CString GetSourceText();
	BOOL GetElemNotification();
	void SetElemNotification(BOOL bNewValue);
	long GetTimeout();
	void SetTimeout(long nNewValue);
	BOOL GetRedraw();
	void SetRedraw(BOOL bNewValue);
	BOOL GetUnderlineLinks();
	void SetUnderlineLinks(BOOL bNewValue);
	BOOL GetUseDocColors();
	void SetUseDocColors(BOOL bNewValue);
	CString GetBackImage();
	void SetBackImage(LPCTSTR lpszNewValue);
	unsigned long GetBackColor();
	void SetBackColor(unsigned long newValue);
	unsigned long GetForeColor();
	void SetForeColor(unsigned long newValue);
	unsigned long GetLinkColor();
	void SetLinkColor(unsigned long newValue);
	unsigned long GetVisitedColor();
	void SetVisitedColor(unsigned long newValue);
	unsigned long GetDocBackColor();
	unsigned long GetDocForeColor();
	unsigned long GetDocLinkColor();
	unsigned long GetDocVisitedColor();
	COleFont GetFont();
	void SetFont(LPDISPATCH newValue);
	COleFont GetFixedFont();
	void SetFixedFont(LPDISPATCH newValue);
	COleFont GetHeading1Font();
	void SetHeading1Font(LPDISPATCH newValue);
	COleFont GetHeading2Font();
	void SetHeading2Font(LPDISPATCH newValue);
	COleFont GetHeading3Font();
	void SetHeading3Font(LPDISPATCH newValue);
	COleFont GetHeading4Font();
	void SetHeading4Font(LPDISPATCH newValue);
	COleFont GetHeading5Font();
	void SetHeading5Font(LPDISPATCH newValue);
	COleFont GetHeading6Font();
	void SetHeading6Font(LPDISPATCH newValue);
	void RequestDoc(LPCTSTR URL);
	void RequestAllEmbedded();
	void Cancel(const VARIANT& Message);
};

#endif // __HTML_H__
