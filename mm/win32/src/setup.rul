
////////////////////////////////////////////////////////////////////////////////
//
//  IIIIIII SSSSSS
//    II    SS                          InstallShield (R)
//    II    SSSSSS      (c) 1996-1997, InstallShield Software Corporation
//    II        SS      (c) 1990-1996, InstallShield Corporation
//  IIIIIII SSSSSS                     All Rights Reserved.
//
//
//  This code is generated as a starting setup template.  You should
//  modify it to provide all necessary steps for your setup.
//
//
//    File Name:  Setup.rul
//
//  Description:  InstallShield script
//
//     Comments:  This template script performs a basic setup on a
//                Windows 95 or Windows NT 4.0 platform. With minor
//                modifications, this template can be adapted to create
//                new, customized setups.
//
////////////////////////////////////////////////////////////////////////////////


  // Include header file
#include "sdlang.h"
#include "sddialog.h"

////////////////////// string defines ////////////////////////////

#define UNINST_LOGFILE_NAME      "grins.isu"

//////////////////// installation declarations ///////////////////

  // ----- DLL prototypes -----


     // your DLL prototypes


  // ---- script prototypes -----

     // generated
     prototype ShowDialogs();
     prototype MoveFileData();
     prototype HandleMoveDataError( NUMBER );
     prototype ProcessBeforeDataMove();
     prototype ProcessAfterDataMove();
     prototype SetupRegistry();
     prototype SetupFolders();
     prototype CleanUpInstall();
     prototype SetupInstall();
     prototype SetupScreen();
     prototype CheckRequirements();
     prototype DialogShowSdWelcome();
     prototype DialogShowSdLicense();
     prototype DialogShowSdShowInfoList();
     prototype DialogShowSdRegisterUserEx();
     prototype DialogShowSdAskDestPath();
     prototype DialogShowSdSetupType();
     prototype DialogShowSdComponentDialog2();
     prototype DialogShowSdSelectFolder();
     prototype DialogShowSdStartCopy();
     prototype DialogShowSdFinishReboot();

     // your prototypes
     //prototype DialogShowSdAskDocsDestPath();

     // ----- global variables ------

     // generated
     BOOL        bWinNT, bIsShellExplorer, bInstallAborted, bIs32BitSetup;
     STRING      svDir;
     STRING      svName, svCompany, svSerial;
     STRING      svDefGroup;
     STRING      szAppPath;
     STRING      svSetupType;
     LIST        listStartCopy;


     // your global variables

     STRING svLogFile ;
     STRING svFileName, szProductName;
     BOOL   ChamInst, editor, player;
     NUMBER nResult, nKeyType, nvSize;


///////////////////////////////////////////////////////////////////////////////
//
//   MAIN PROGRAM
//
//      The setup begins here by hiding the visible setup
//      window.  This is done to allow all the titles, images, etc. to
//      be established before showing the main window.  The following
//      logic then performs the setup in a series of steps.
//
///////////////////////////////////////////////////////////////////////////////
program
    Disable( BACKGROUND );
	//////////////////////////////////////////////////////////////////
	// If you create a setup for player only set editor = 0 , for a //
	// combined setup (player +editor) set editor =1 .... ////////////
	//////////////////////////////////////////////////////////////////
	editor=1;
    player=1;
    CheckRequirements();

    SetupInstall();

    SetupScreen();

    if (ShowDialogs()<0) goto end_install;

    if (ProcessBeforeDataMove()<0) goto end_install;

    if (SetupRegistry()<0) goto end_install;

    if (MoveFileData()<0) goto end_install;

    if (ProcessAfterDataMove()<0) goto end_install;

    if (SetupFolders()<0) goto end_install;

  end_install:

    CleanUpInstall();

     // If an unrecoverable error occurred, clean up the partial installation.
     // Otherwise, exit normally.

    if (bInstallAborted) then
        abort;
    endif;

endprogram

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function:  ShowDialogs                                                    //
//                                                                           //
//  Purpose:  This function manages the display and navigation               //
//            the standard dialogs that exist in a setup.                    //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function ShowDialogs()
    NUMBER  nResult;
 begin

    Dlg_Start:
        // beginning of dialogs label

    Dlg_SdWelcome:
        nResult = DialogShowSdWelcome();
        if (nResult = BACK) goto Dlg_Start;

    Dlg_SdLicense:
        nResult = DialogShowSdLicense();
        if (nResult = BACK) goto Dlg_SdWelcome;

    //Dlg_SdShowInfoList:
    //    nResult = DialogShowSdShowInfoList();
    //    if (nResult = BACK) goto Dlg_SdLicense;

    //Dlg_SdRegisterUserEx:
    //    nResult = DialogShowSdRegisterUserEx();
    //    if (nResult = BACK) goto Dlg_SdLicense;
        //if (nResult = BACK) goto Dlg_SdShowInfoList;

    Dlg_SdAskDestPath:
        nResult = DialogShowSdAskDestPath();
        //if (nResult = BACK) goto Dlg_Start;
        if (nResult = BACK) goto Dlg_SdLicense;

    //Dlg_SdAskDocsDestPath:
    //   nResult = DialogShowSdAskDocsDestPath();
    //    if (nResult = BACK) goto Dlg_SdAskDestPath;

    //Dlg_SdSetupType:
    //    nResult = DialogShowSdSetupType();
        //if (nResult = BACK) goto Dlg_SdAskDocsDestPath;
    //    if (nResult = BACK) goto Dlg_SdAskDestPath;

    //Dlg_SdComponentDialog2:
    //    if ((nResult = BACK) && (svSetupType != "Custom") && (svSetupType != "")) then
    //       goto Dlg_SdSetupType;
    //    endif;
    //    nResult = DialogShowSdComponentDialog2();
    //    if (nResult = BACK) goto Dlg_SdSetupType;

    //Dlg_SdSelectFolder:
    //    nResult = DialogShowSdSelectFolder();
    //    if (nResult = BACK) goto Dlg_SdComponentDialog2;

    //Dlg_SdStartCopy:
    //    nResult = DialogShowSdStartCopy();
        //if (nResult = BACK) goto Dlg_SdSelectFolder;
    //    if (nResult = BACK) goto Dlg_SdAskDestPath;

    return 0;

 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: ProcessBeforeDataMove                                           //
//                                                                           //
//  Purpose: This function performs any necessary operations prior to the    //
//           actual data move operation.                                     //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function ProcessBeforeDataMove()

  NUMBER nResult;
 begin
  //MessageBox ( "Entering ProcessBeforeDataMove" , INFORMATION );

  InstallationInfo( @COMPANY_NAME, @PRODUCT_NAME, @PRODUCT_VERSION, @PRODUCT_KEY );

  svLogFile = UNINST_LOGFILE_NAME;

  nResult = DeinstallStart( WINDIR, svLogFile, @UNINST_KEY, 0 );
  if (nResult < 0) then
      MessageBox( @ERROR_UNINSTSETUP, WARNING );
  endif;

  szAppPath = TARGETDIR; // TODO : if your application .exe is in a subdir of TARGETDIR then add subdir

  if ((bIs32BitSetup) && (bIsShellExplorer)) then
     RegDBSetItem( REGDB_APPPATH, szAppPath );
     RegDBSetItem( REGDB_APPPATH_DEFAULT, szAppPath ^ @PRODUCT_KEY );
     RegDBSetItem( REGDB_UNINSTALL_NAME, @UNINST_DISPLAY_NAME );
  endif;

  // TODO : update any items you want to process before moving the data
  //

  return 0;
 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function:  MoveFileData                                                   //
//                                                                           //
//  Purpose:  This function handles the data movement for                    //
//            the setup.                                                     //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function MoveFileData()
  NUMBER nResult, nDisk;

 begin
  //MessageBox ( "Entering MoveFileData" , INFORMATION );
  nDisk = 1;
  SetStatusWindow( 0, "" );
  Disable( DIALOGCACHE );
  Enable( STATUS );
  StatusUpdate( ON, 100 );

  //MessageBox ( svSetupType , INFORMATION );

  nResult = ComponentMoveData( MEDIA, nDisk, 0 );

  HandleMoveDataError( nResult );

  Disable( STATUS );

  return nResult;

 end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: HandleMoveDataError                                             //
//                                                                           //
//  Purpose: This function handles the error (if any) during the move data   //
//           operation.                                                      //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function HandleMoveDataError( nResult )
 begin
  //MessageBox ( "Entering HandleDataMoveError" , INFORMATION );
  switch (nResult)
  case 0:
       return 0;
  default:
       SprintfBox( SEVERE, @TITLE_CAPTIONBAR, @ERROR_MOVEDATA, nResult );
       bInstallAborted = TRUE;
       return nResult;
  endswitch;

 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: ProcessAfterDataMove                                            //
//                                                                           //
//  Purpose: This function performs any necessary operations needed after    //
//           all data has been moved.                                        //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function ProcessAfterDataMove()
  STRING szReferenceFile;
 begin
  //MessageBox ( "Entering ProcessAfterDataMove" , INFORMATION );
  // TODO : update self-registered files and other processes that
  //        should be performed after the data has been moved.

  // DeinstallSetReference specifies a file to be checked before
  // uninstallation. If the file is in use, uninstallation will not proceed.

  szReferenceFile = svDir ^ @PRODUCT_KEY; // TODO : If your file is in a sbudir of svDir add that here
  DeinstallSetReference( szReferenceFile );


  return 0;
 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: SetupRegistry                                                   //
//                                                                           //
//  Purpose: This function makes the registry entries for this setup.        //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function SetupRegistry()

 STRING szMainKey;
 STRING szKey1, szKey2, szKey3, szKey4, szKey5, szKey6 ;
 STRING szClass, szName, szTitle;
 STRING szMainValue, szValue1, szValue2;
 NUMBER nType, nvType, nSize, nvSize;
 STRING CMIFKey, SMILKey, CMIFExtKey, SMIExtKey, SMILExtKey;
 STRING IconKey, ShellKey, OpenKey, CommandKey;
 STRING CMIFIconKey, SMILIconKey, CMIFShellKey, SMILShellKey;
 STRING CMIFOpenKey, SMILOpenKey, CMIFCommandKey, SMILCommandKey;
 STRING GrinsPath, GrinsedPath, IconPath, EditKey;
 STRING CMIFEditKey, CMIFEditCommandKey, SMILEditKey, SMILEditCommandKey;

 begin
   //MessageBox ( "Entering SetupRegistry" , INFORMATION );

   ////////////////////////////////////////////////////////////////
   ////// ASSOCIATE .CMIF .SMI .SMIL WITH GRINS ///////////////////
   ////////////////////////////////////////////////////////////////

   szClass="" ;
   szName="";
   nType=REGDB_STRING;
   nSize    = -1;


   RegDBSetDefaultRoot(HKEY_CLASSES_ROOT);

   CMIFKey="cmiffile";
   SMILKey="smilfile";
   CMIFExtKey=".cmif";
   SMIExtKey=".smi";
   SMILExtKey=".smil";
   IconKey="\\DefaultIcon";
   ShellKey="\\Shell";
   OpenKey="\\Open";
   CommandKey="\\Command";
   CMIFIconKey=CMIFKey+IconKey;
   SMILIconKey=SMILKey+IconKey;
   CMIFShellKey=CMIFKey+ShellKey;
   SMILShellKey=SMILKey+ShellKey;
   CMIFOpenKey=CMIFShellKey+OpenKey;
   SMILOpenKey=SMILShellKey+OpenKey;
   CMIFCommandKey=CMIFOpenKey+CommandKey;
   SMILCommandKey=SMILOpenKey+CommandKey;
   GrinsPath='"'+TARGETDIR+'\\grins.exe" %1';
   IconPath=TARGETDIR+"\\grinsdoc.ico,0";
   EditKey="\\Edit";
   GrinsedPath='"'+TARGETDIR+'\\grinsed.exe" %1';
   CMIFEditKey=CMIFShellKey+EditKey;
   SMILEditKey=SMILShellKey+EditKey;
   CMIFEditCommandKey=CMIFEditKey+CommandKey;
   SMILEditCommandKey=SMILEditKey+CommandKey;

   //"C:\Program Files\Epsilon S.A\GRiNS\grins.exe" %1
   //C:\temp\grinsdoc.ico,0
   ////// .cmif .smi .smil cmiffile, smilfile registry work //////

   RegDBCreateKeyEx(CMIFExtKey, szClass);// panta
   RegDBSetKeyValueEx(CMIFExtKey, szName, nType, CMIFKey, nSize);//panta
   //RegDBCreateKeyEx(SMIExtKey, szClass);
   //RegDBSetKeyValueEx(SMIExtKey, szName, nType, SMILKey, nSize);
   RegDBCreateKeyEx(SMILExtKey, szClass);
   RegDBSetKeyValueEx(SMILExtKey, szName, nType, SMILKey, nSize);

   RegDBCreateKeyEx(CMIFKey, szClass);//panta
   RegDBSetKeyValueEx(CMIFKey, szName, nType, "GRiNS CMIF Document", nSize);
   RegDBCreateKeyEx(SMILKey, szClass);
   RegDBSetKeyValueEx(SMILKey, szName, nType, "GRiNS SMIL Document", nSize);
   RegDBCreateKeyEx(CMIFIconKey, szClass);
   RegDBSetKeyValueEx(CMIFIconKey, szName, nType, IconPath, nSize);
   RegDBCreateKeyEx(SMILIconKey, szClass);
   RegDBSetKeyValueEx(SMILIconKey, szName, nType, IconPath, nSize);//panta
   RegDBCreateKeyEx(CMIFShellKey, szClass); //Empty Value
   RegDBCreateKeyEx(SMILShellKey, szClass); //Empty Value
   if player then
        RegDBCreateKeyEx(CMIFOpenKey, szClass);  //Empty Value
        RegDBCreateKeyEx(SMILOpenKey, szClass);  //Empty Value
        RegDBCreateKeyEx(CMIFCommandKey, szClass);
        RegDBSetKeyValueEx(CMIFCommandKey, szName, nType, GrinsPath, nSize);
        RegDBCreateKeyEx(SMILCommandKey, szClass);
        RegDBSetKeyValueEx(SMILCommandKey, szName, nType, GrinsPath, nSize);
   endif;

   if editor then
   	  	RegDBCreateKeyEx(CMIFEditKey, szClass);  //Empty Value
   		RegDBCreateKeyEx(SMILEditKey, szClass);  //Empty Value
   		RegDBCreateKeyEx(CMIFEditCommandKey, szClass);
    	RegDBSetKeyValueEx(CMIFEditCommandKey, szName, nType, GrinsedPath, nSize);
    	RegDBCreateKeyEx(SMILEditCommandKey, szClass);
    	RegDBSetKeyValueEx(SMILEditCommandKey, szName, nType, GrinsedPath, nSize);
   endif;


  return 0;
 end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupFolders
//
//  Purpose: This function creates all the folders and shortcuts for the
//           setup.  This includes program groups and items for Windows 3.1.
//
///////////////////////////////////////////////////////////////////////////////
function SetupFolders()
 STRING szUIProgram;
 begin

  //MessageBox ( "Entering SetupFolders" , INFORMATION );
  // TODO : Add all your folder (program group) along with shortcuts (program items)
  //
  //
  //    CreateProgramFolder, AddFolderIcon....
  //
  //    Note : for 16-bit setups you should add an uninstaller icon pointing to
  //           your log file.  Under 32-bit this is automatically done by Windows.
  CreateProgramFolder("GRiNS");
  if player then
        AddFolderIcon (FOLDER_DESKTOP, "GRiNS Player", '"'+TARGETDIR^"grins.exe"+'"', "", TARGETDIR^"smile.ico", NULL, "", NULL);
        AddFolderIcon (FOLDER_PROGRAMS^"GRiNS", "GRiNS Player", '"'+TARGETDIR^"grins.exe"+'"', "", TARGETDIR^"smile.ico", NULL, "", NULL);
  endif;
  if editor then
  		AddFolderIcon (FOLDER_DESKTOP, "GRiNS Editor", '"'+TARGETDIR^"grinsed.exe"+'"', "", TARGETDIR^"smil_ed.ico", NULL, "", NULL);
  		AddFolderIcon (FOLDER_PROGRAMS^"GRiNS", "GRiNS Editor", '"'+TARGETDIR^"grinsed.exe"+'"', "", TARGETDIR^"smil_ed.ico", NULL, "", NULL);
  endif;
  szUIProgram = UNINST + " -f" + svLogFile;
  AddFolderIcon(FOLDER_PROGRAMS^"GRiNS", "UnInstall GRiNS", szUIProgram, WINDIR, "", 0, "", REPLACE);
  return 0;
 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: CleanUpInstall                                                  //
//                                                                           //
//  Purpose: This cleans up the setup.  Anything that should                 //
//           be released or deleted at the end of the setup should           //
//           be done here.                                                   //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function CleanUpInstall()
 begin
  //MessageBox ( "Entering CleanUpInstall" , INFORMATION );
  ListDestroy( listStartCopy );

  if (bInstallAborted) then
      return 0;
  endif;

  DialogShowSdFinishReboot();

  if (BATCH_INSTALL) then // ensure locked files are properly written
     CommitSharedFiles(0);
  endif;

  return 0;
 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: SetupInstall                                                    //
//                                                                           //
//  Purpose: This will setup the installation.  Any general initialization   //
//           needed for the installation should be performed here.           //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function SetupInstall()
 begin
  //MessageBox ( "Entering SetupInstall" , INFORMATION );
  Enable( CORECOMPONENTHANDLING );

  bInstallAborted = FALSE;

  listStartCopy = ListCreate(STRINGLIST);

  ListAddString( listStartCopy, " ", AFTER );

  if (bIs32BitSetup) then
     //svDir = PROGRAMFILES ^ @COMPANY_NAME ^ @PRODUCT_NAME;
     svDir = "C:\\GRiNS";
  else
     //svDir = PROGRAMFILES ^ @COMPANY_NAME16 ^ @PRODUCT_NAME16; // use shorten names
     svDir = "C:\\GRiNS" ;// use shorten names
  endif;

  TARGETDIR  = svDir;

  SdProductName( @PRODUCT_NAME );

  Enable( DIALOGCACHE );

  return 0;
 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function:  SetupScreen                                                    //
//                                                                           //
//  Purpose:  This function establishes  the screen look.  This includes     //
//            colors, fonts, and text to be displayed.                       //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function SetupScreen()
 begin
  // MessageBox ( "Entering SetupScreen" , INFORMATION );
   Enable( FULLWINDOWMODE );
   SetTitle( @TITLE_MAIN, 24, WHITE );

   SetTitle( @TITLE_CAPTIONBAR, 0, BACKGROUNDCAPTION ); // Caption bar text.

   Enable( BACKGROUND );

   Delay( 1 );
 end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function:  CheckRequirements                                              //
//                                                                           //
//  Purpose:  This function checks all minimum requirements for the          //
//            application being installed.  If any fail, then the user       //
//            is informed and the setup is terminated.                       //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function CheckRequirements()
   NUMBER  nvDx, nvDy, nvResult;
   STRING  svResult;

begin
   //MessageBox ( "Entering CheckRequirements" , INFORMATION );
   bWinNT           = FALSE;
   bIsShellExplorer = FALSE;

   // Check screen resolution.
   GetExtents( nvDx, nvDy );

   if (nvDy < 480) then
      MessageBox( @ERROR_VGARESOLUTION, WARNING );
      abort;
   endif;

   // set 'setup' operation mode
   bIs32BitSetup = TRUE;
   GetSystemInfo( ISTYPE, nvResult, svResult );
   if (nvResult = 16) then
     bIs32BitSetup = FALSE; // running 16-bit setup
     return 0; // no additional information required
   endif;

   // --- 32-bit testing after this point ---

   // Determine the target system's operating system.
   GetSystemInfo( OS, nvResult, svResult );

   if (nvResult =  IS_WINDOWSNT) then
      // Running Windows NT.
      bWinNT = TRUE;

      // Check to see if the shell being used is EXPLORER shell.
      if (GetSystemInfo( OSMAJOR, nvResult, svResult ) = 0) then
         if (nvResult >= 4) then
            bIsShellExplorer = TRUE;
         endif;
      endif;

   elseif (nvResult = IS_WINDOWS95 ) then
      bIsShellExplorer = TRUE;

   endif;

end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdWelcome                                             //
//                                                                           //
//  Purpose: This function handles the standard welcome dialog.              //
//                                                                           //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdWelcome()
  NUMBER nResult;
  STRING szTitle, szMsg;
 begin

  szTitle = "Welcome";

  if player && !editor then
        szMsg   = "Welcome to GRiNS Player of SMIL Documents";
  endif;

  if editor && !player then
  		szMsg   = "Welcome to GRiNS Editor of SMIL Documents";
  endif;

  if player && editor then
        szMsg   = "Welcome to GRiNS player and Editor of SMIL Documents";
  endif;

  nResult = SdWelcome( szTitle, szMsg );

  return nResult;
 end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdLicense                                             //
//                                                                           //
//  Purpose: This function displays the license agreement dialog.            //
//                                                                           //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdLicense()
  NUMBER nResult;
  STRING szTitle, szMsg, szQuestion, szLicenseFile;
 begin

  szLicenseFile = SUPPORTDIR ^ "license.txt";
  szTitle    = "Copyright";
  szMsg      = " ";
  szQuestion = "Continue with GRiNS setup ?";
  nResult    = SdLicense( szTitle, szMsg, szQuestion, szLicenseFile );

  return nResult;
 end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdShowInfoList                                        //
//                                                                           //
//  Purpose: This function displays the general information list dialog.     //
//                                                                           //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdShowInfoList()
  NUMBER nResult;
  LIST   list;
  STRING szTitle, szMsg, szFile;
 begin

  szFile = SUPPORTDIR ^ "infolist.txt";

  list = ListCreate( STRINGLIST );
  ListReadFromFile( list, szFile );
  szTitle  = "";
  szMsg    = " ";
  nResult  = SdShowInfoList( szTitle, szMsg, list );

  ListDestroy( list );

  return nResult;
 end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdRegisterUserEx                                      //
//                                                                           //
//  Purpose: This function displays the user registration dialog.            //
//                                                                           //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdRegisterUserEx()
  NUMBER nResult;
  STRING szTitle, szMsg;
 begin


  svName    = "";
  svCompany = "";

  szTitle = "";
  szMsg   = "";
  nResult = SdRegisterUserEx( szTitle, szMsg, svName, svCompany, svSerial );

  return nResult;
 end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdAskDestPath                                         //
//                                                                           //
//  Purpose: This function asks the user for the destination directory.      //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdAskDestPath()
  NUMBER nResult, nvSize, nvType ;
  STRING szTitle, szMsg, CmifInstPath;
 begin

  szTitle = "";
  szMsg   = "";

  nResult = SdAskDestPath( szTitle, szMsg, svDir, 0 );
  //MessageBox ( "svDir = "+svDir , INFORMATION );
  TARGETDIR = svDir;

  //MessageBox ( "TARGETDIR = "+TARGETDIR , INFORMATION );
  //MessageBox ( "svDir = "+svDir , INFORMATION );

  return nResult;
 end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdSetupType                                           //
//                                                                           //
//  Purpose: This function displays the standard setup type dialog.          //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdSetupType()
  NUMBER nResult, nType, nReserved;
  STRING szTitle, szMsg, szReserved;
 begin

  szTitle = "szTitle in DialogShowSdSetupType";
  szMsg   = "szMsg in DialogShowSdSetupType";
  szReserved = "";
  nReserved = 0;
  svSetupType = "Custom";
  nResult = SdSetupTypeEx (szTitle, szMsg, szReserved, svSetupType, nReserved);
  //MessageBox ( "svSetupType = "+svSetupType , INFORMATION );

  return nResult;
 end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdComponentDialog2                                    //
//                                                                           //
//  Purpose: This function displays the custom component dialog.             //
//                                                                           //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdComponentDialog2()
  NUMBER nResult;
  STRING szTitle, szMsg;
 begin
  //MessageBox ( "Entering DialogShowSdComponentDialog2()" , INFORMATION );

  if ((svSetupType != "Custom") && (svSetupType != "")) then
     return 0;
  endif;

  szTitle  = "";
  szMsg    = "";
  nResult  = SdComponentDialog2( szTitle, szMsg, svDir, "" );

  return nResult;
 end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdSelectFolder                                        //
//                                                                           //
//  Purpose: This function displays the standard folder selection dialog.    //
//                                                                           //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdSelectFolder()
  NUMBER nResult;
  STRING szTitle, szMsg;
 begin

  if (svDefGroup = "") then
      svDefGroup = @FOLDER_NAME;
  endif;

  szTitle    = "";
  szMsg      = "";
  nResult    = SdSelectFolder( szTitle, szMsg, svDefGroup );

  return nResult;
 end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdStartCopy                                          //
//                                                                           //
//   Purpose: This function displays the dialog preceding the start of the   //
//            file copying process.                                          //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdStartCopy()
  NUMBER nResult;
  STRING szTitle, szMsg;
 begin

  szTitle = "";
  szMsg   = "";
  nResult = SdStartCopy( szTitle, szMsg, listStartCopy );

  return nResult;
 end;


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
// Function: DialogShowSdFinishReboot                                        //
//                                                                           //
//  Purpose: This function will show the last dialog of the product.         //
//           It will allow the user to reboot and/or show some readme text.  //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdFinishReboot()
  NUMBER nResult, nDefOptions;
  STRING szTitle, szMsg1, szMsg2, szOption1, szOption2;
  NUMBER bOpt1, bOpt2;
 begin
  szTitle     = "End of GRiNS Setup";
  if (!BATCH_INSTALL) then
     bOpt1 = FALSE;
     bOpt2 = FALSE;
     szMsg1 = "";
     szMsg2 = "";
     szOption1 = "";
     szOption2 = "";
     nResult = SdFinish( szTitle, szMsg1, szMsg2, szOption1, szOption2, bOpt1, bOpt2 );
     return 0;
  endif;

  nDefOptions = SYS_BOOTMACHINE;
  //szTitle     = "";
  szMsg1      = "";
  szMsg2      = "";
  nResult     = SdFinishReboot( szTitle, szMsg1, nDefOptions, szMsg2, 0 );

  return nResult;
 end;

 // --- include script file section ---

#include "sddialog.rul"


















































































