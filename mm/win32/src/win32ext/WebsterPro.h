#ifndef __WEBSTERPRO__H__
#define __WEBSTERPRO__H__

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


// Dispatch interfaces referenced by this interface
class COleFont;

/////////////////////////////////////////////////////////////////////////////
// CWebsterPro wrapper class

class CWebsterPro : public CWnd
{
protected:
	DECLARE_DYNCREATE(CWebsterPro)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x22bbd0e0, 0x74fd, 0x11d1, { 0xb2, 0xc7, 0x0, 0xa0, 0xc9, 0x8b, 0x5b, 0x55 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	short GetBorderStyle();
	void SetBorderStyle(short);
	COleFont GetFont();
	void SetFont(LPDISPATCH);
	OLE_HANDLE GetHWnd();
	void SetHWnd(OLE_HANDLE);
	BOOL GetEnabled();
	void SetEnabled(BOOL);
	long GetBevelStyleInner();
	void SetBevelStyleInner(long);
	long GetBevelStyleOuter();
	void SetBevelStyleOuter(long);
	long GetBevelWidth();
	void SetBevelWidth(long);
	COleFont GetFontHeading1();
	void SetFontHeading1(LPDISPATCH);
	COleFont GetFontHeading2();
	void SetFontHeading2(LPDISPATCH);
	COleFont GetFontHeading3();
	void SetFontHeading3(LPDISPATCH);
	COleFont GetFontHeading4();
	void SetFontHeading4(LPDISPATCH);
	COleFont GetFontHeading5();
	void SetFontHeading5(LPDISPATCH);
	COleFont GetFontHeading6();
	void SetFontHeading6(LPDISPATCH);
	COleFont GetFontMenu();
	void SetFontMenu(LPDISPATCH);
	COleFont GetFontDir();
	void SetFontDir(LPDISPATCH);
	COleFont GetFontBlockQuote();
	void SetFontBlockQuote(LPDISPATCH);
	COleFont GetFontExample();
	void SetFontExample(LPDISPATCH);
	COleFont GetFontPreformatted();
	void SetFontPreformatted(LPDISPATCH);
	COleFont GetFontListing();
	void SetFontListing(LPDISPATCH);
	COleFont GetFontNormal();
	void SetFontNormal(LPDISPATCH);
	COleFont GetFontAddress();
	void SetFontAddress(LPDISPATCH);
	unsigned long GetBevelColorTop();
	void SetBevelColorTop(unsigned long);
	unsigned long GetBevelColorDark();
	void SetBevelColorDark(unsigned long);
	unsigned long GetBevelColorLight();
	void SetBevelColorLight(unsigned long);
	long GetUrlWindowStyle();
	void SetUrlWindowStyle(long);
	long GetTitleWindowStyle();
	void SetTitleWindowStyle(long);
	CString GetPageURL();
	void SetPageURL(LPCTSTR);
	CString GetPageTitle();
	void SetPageTitle(LPCTSTR);
	unsigned long GetAnchorColor();
	void SetAnchorColor(unsigned long);
	CString GetHomePage();
	void SetHomePage(LPCTSTR);
	CString GetDownloadDir();
	void SetDownloadDir(LPCTSTR);
	long GetPagesToCache();
	void SetPagesToCache(long);
	OLE_COLOR GetBackColor();
	void SetBackColor(OLE_COLOR);
	BOOL GetIgnoreBaseInFile();
	void SetIgnoreBaseInFile(BOOL);
	long GetLoadStatus();
	void SetLoadStatus(long);
	OLE_COLOR GetForeColor();
	void SetForeColor(OLE_COLOR);
	long GetMaxSockets();
	void SetMaxSockets(long);
	long GetMaxPageLoads();
	void SetMaxPageLoads(long);
	long GetMarginHorizontal();
	void SetMarginHorizontal(long);
	long GetMarginVertical();
	void SetMarginVertical(long);
	BOOL GetLoadImages();
	void SetLoadImages(BOOL);
	BOOL GetShowReferer();
	void SetShowReferer(BOOL);
	CString GetAuthenticName();
	void SetAuthenticName(LPCTSTR);
	CString GetAuthenticPassword();
	void SetAuthenticPassword(LPCTSTR);
	CString GetFromName();
	void SetFromName(LPCTSTR);
	CString GetBrowserName();
	void SetBrowserName(LPCTSTR);
	long GetButtonMask();
	void SetButtonMask(long);
	CString GetProxyServerHTTP();
	void SetProxyServerHTTP(LPCTSTR);
	long GetProxyPortHTTP();
	void SetProxyPortHTTP(long);
	long GetImageCacheKB();
	void SetImageCacheKB(long);
	CString GetShortcutDir();
	void SetShortcutDir(LPCTSTR);
	LPDISPATCH GetProxyExclusionsHTTP();
	void SetProxyExclusionsHTTP(LPDISPATCH);
	long GetScrollbarStyleVertical();
	void SetScrollbarStyleVertical(long);
	long GetScrollbarStyleHorizontal();
	void SetScrollbarStyleHorizontal(long);
	long GetScrollPosVertical();
	void SetScrollPosVertical(long);
	long GetScrollPosHorizontal();
	void SetScrollPosHorizontal(long);
	long GetPageWidth();
	void SetPageWidth(long);
	long GetPageHeight();
	void SetPageHeight(long);
	long GetDisplayLeft();
	void SetDisplayLeft(long);
	long GetDisplayTop();
	void SetDisplayTop(long);
	long GetDisplayWidth();
	void SetDisplayWidth(long);
	long GetDisplayHeight();
	void SetDisplayHeight(long);
	LPDISPATCH GetCachedPages();
	void SetCachedPages(LPDISPATCH);
	LPDISPATCH GetHistoryPages();
	void SetHistoryPages(LPDISPATCH);
	BOOL GetReloadIncludesObjects();
	void SetReloadIncludesObjects(BOOL);
	BOOL GetPaletteForceBackground();
	void SetPaletteForceBackground(BOOL);
	BOOL GetKeepForwardHistory();
	void SetKeepForwardHistory(BOOL);
	CString GetCookiesDir();
	void SetCookiesDir(LPCTSTR);
	long GetCookieControl();
	void SetCookieControl(long);
	long GetSelectionState();
	void SetSelectionState(long);
	long GetSelectionStartOffset();
	void SetSelectionStartOffset(long);
	long GetSelectionLength();
	void SetSelectionLength(long);
	CString GetProxyServerUserNameHTTP();
	void SetProxyServerUserNameHTTP(LPCTSTR);
	CString GetProxyServerPasswordHTTP();
	void SetProxyServerPasswordHTTP(LPCTSTR);
	BOOL GetNoFrames();
	void SetNoFrames(BOOL);
	long GetPageObjectHandle();
	void SetPageObjectHandle(long);
	long GetFocusPageObjectHandle();
	void SetFocusPageObjectHandle(long);
	long GetButtonEnabledMask();
	void SetButtonEnabledMask(long);
	long GetMenuControl();
	void SetMenuControl(long);
	long GetAnimationControl();
	void SetAnimationControl(long);
	long GetLayoutControl();
	void SetLayoutControl(long);
	long GetPaletteHandle();
	void SetPaletteHandle(long);
	long GetPrintBackgroundColors();
	void SetPrintBackgroundColors(long);
	long GetToolTipStyle();
	void SetToolTipStyle(long);
	long GetCursorHandle();
	void SetCursorHandle(long);
	long GetPrintPageBreakForImages();
	void SetPrintPageBreakForImages(long);
	long GetPrintPageBreakForTables();
	void SetPrintPageBreakForTables(long);
	long GetTextCopyMode();
	void SetTextCopyMode(long);
	unsigned long GetVisitedColor();
	void SetVisitedColor(unsigned long);
	long GetStatusDisplay();
	void SetStatusDisplay(long);
	unsigned long GetActiveColor();
	void SetActiveColor(unsigned long);
	unsigned long GetHoverColor();
	void SetHoverColor(unsigned long);
	CString Get_PageURL();
	void Set_PageURL(LPCTSTR);

// Operations
public:
	void Refresh();
	short SaveToDisk(LPCTSTR FileName);
	short Cancel();
	long GetContentSize(LPCTSTR URL);
	long GetContentSizeRead(LPCTSTR URL);
	CString GetContentType(LPCTSTR URL);
	CString GetRedirectedURL(LPCTSTR URL);
	short GetHiddenFlag(LPCTSTR URL);
	short SetHiddenFlag(LPCTSTR URL, BOOL Hidden);
	short DismissPage(LPCTSTR URL);
	long GetLinkCount(LPCTSTR URL);
	CString GetLinkURL(LPCTSTR URL, long Index);
	CString GetContent(LPCTSTR URL, long StartOffset, long Length);
	short GetStatus(LPCTSTR URL);
	CString GetTitle(LPCTSTR URL);
	CString GetText(LPCTSTR URL, long StartOffset, long Length);
	short LoadPage(LPCTSTR URL, short Hidden);
	long GetTextSize(LPCTSTR URL);
	void GoHome();
	void ShowHistory();
	void ShowStatus();
	void PageBack();
	void PageForth();
	void Reload();
	void ShowDir();
	short ShowOpenFileDialog(LPCTSTR DefaultFile);
	short ShowURLDialog(LPCTSTR DefaultURL);
	long PrintToDC(long hDC, long lPageNum, BOOL bPreview);
	long Paginate(long hDC, long lPageLeft, long lPageTop, long lPageRight, long lPageBottom, long plTotalPages);
	void EndPrint();
	long DoPrint(BOOL bShowPrinterDialog, long fromPage, long toPage);
	CString GetHTTPHeader(LPCTSTR URL);
	short AddToFavorites(LPCTSTR URL, BOOL bShowSaveDialog);
	short ShowFavoritesDialog();
	short LoadHeader(LPCTSTR URL, short Hidden);
	short PostText(LPCTSTR URL, LPCTSTR TextToPost, short Hidden);
	LPDISPATCH GetEmbeddedObjectURLs(LPCTSTR URL);
	long GetObjectAtXY(long x, long y, BSTR* pObjectURL, BSTR* pHyperlinkURL, long* plReserved1);
	long FindString(BOOL bShowFindDialog, LPCTSTR StringToFind, BOOL MatchCase, BOOL Reverse);
	long SelectText(long StartOffset, long Length);
	long SelectAllText();
	long CopySelectedText();
	void ClearTextSelection();
	void ScrollToSelectedText();
	long SaveObjectToFile(LPCTSTR ObjectUrl, LPCTSTR FileName, BOOL bShowSaveDialog);
	LPDISPATCH GetFrameURLs(LPCTSTR URL);
	long GetSingleObjectHandle(LPCTSTR URL);
	CString GetURLByObjectHandle(long hObject);
	long GetObjecthWnd(LPCTSTR URL);
	long GethWndByObjectHandle(long hObject);
	LPDISPATCH GetFrameObjectHandles(long hObject);
	short Navigate(LPCTSTR URL, long NavFlags, long nHandle, LPCTSTR TargetName, LPCTSTR TextToPost, LPCTSTR ExtraHeaders);
	long Paginate2(long hDC, long lPageLeft, long lPageTop, long lPageRight, long lPageBottom, long* plTotalPages);
	void AboutBox();
};

//
// Navigation flags
//
enum      {NAV_GET                = 0x0000L,
           NAV_POST               = 0x0001L,
           NAV_HEAD               = 0x0002L,
           NAV_HIDDENLOAD         = 0x0004L,
           NAV_NOREADFROMCACHE    = 0x0008L,
           NAV_FOUNDINCACHE       = 0x0010L,
           NAV_INFRAMECONTEXT     = 0x0020L,
           NAV_FORMSUBMIT         = 0x0040L,
           NAV_CONTAINERACTION    = 0x0080L,
           NAV_NAVPAGEBACK        = 0X0100L,
           NAV_NAVPAGEFORTH       = 0X0200L,
           NAV_NAVDONTMAKECURRENT = 0X0400L,
           NAV_NAVMETAREFRESH     = 0X0800L,
           NAV_NAVUSERHYPERLINK   = 0X1000L,
           NAV_NAVCREATEFROMTEXT  = 0X2000L,
           };

//
// The Webster GetLoadStatus() status codes
//
enum      {LSC_PAGEISLOADED       = 0,
           LSC_CONNECTINGTOHOST   = 1,
           LSC_WAITINGFORRESPONSE = 2,
           LSC_LOADINGTEXT        = 3,
           LSC_LOADINGIMAGES      = 4,
           LSC_PAGELOADFAILED     = 5,
           LSC_PAGELOADCANCELED   = 6,
           LSC_LOADINGFRAMES      = 7,
           LSC_PAGEISNOTINCACHE   = -1,
           };
//
// The object types are used by GetObjectAtXY
//
enum      {OTM_EMPTY      = 0x0001L,
           OTM_HYPERLINK  = 0x0002L,
           OTM_TEXT       = 0x0004L,
           OTM_IMAGE      = 0x0008L,
           OTM_IMAGEMAP   = 0x0010L,
           OTM_IMAGEINPUT = 0x0020L,
           OTM_CONTROL    = 0x0040L,
           OTM_TABLE      = 0x0080L,
           OTM_USEMAP     = 0x0100L,
           };

#endif // __WEBSTERPRO__H__
