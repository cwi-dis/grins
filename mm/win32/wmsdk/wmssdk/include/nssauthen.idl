//+-------------------------------------------------------------------------
//
//  Copyright (C) Microsoft Corporation, 1998 - 1998
//
//  File:       nssauthen.idl
//
//  Contents:   NetShow Unicast Server Authentication Interface definitions
//
//--------------------------------------------------------------------------

cpp_quote("//+-------------------------------------------------------------------------")
cpp_quote("//")
cpp_quote("//  Microsoft NetShow")
cpp_quote("//  Copyright (C) Microsoft Corporation 1998.")
cpp_quote("//")
cpp_quote("//  Automatically generated by Midl from nssauthen.idl")
cpp_quote("//")
cpp_quote("//  DO NOT EDIT THIS FILE.")
cpp_quote("//")
cpp_quote("//--------------------------------------------------------------------------")

import "oaidl.idl";
import "ocidl.idl";
import "nsscore.idl";

interface INSSUserAuthentication;
// interface INSSAuthenticationContext;




///////////////////////////////////////////////////////////////////////////////
// return code of authentication
//

typedef enum NS_AUTH_RESULT
{
    NS_AUTH_SUCCESS      = 0x01,
    NS_AUTH_DENIED       = 0x02,
    NS_AUTH_CONTINUE     = 0x03,
    NS_AUTH_ERROR        = 0x04,
    NS_AUTH_PENDING      = 0x05,
    NS_AUTH_NONE         = 0x06, // Internal use only
    NS_AUTH_START        = 0x07, // Internal use only
} NS_AUTH_RESULT;




typedef enum NS_AUTH_FLAGS
{
    NS_TEXT_WIRE_PROTOCOL      = 0x00000001,

} NS_AUTH_FLAGS;





///////////////////////////////////////////////////////////////////////////////
[
    object,
    uuid(6bf5dfc4-1b4d-11d1-9312-00c04fd919b7),
    version(1.0),
    pointer_default(unique)
]
interface INSSAuthenticationCallback : IUnknown
{
    //
    // The Result param of this call should never be NS_AUTH_PENDING.
    //
    HRESULT OnAuthenticateComplete(
                [in] NS_AUTH_RESULT Result,
                [in] INSSUserAuthentication *pUserCredential,
                [in] DWORD dwRequestId
                );
};






///////////////////////////////////////////////////////////////////////////////
[
    object,
    uuid(cb27d5e6-3778-11d1-8c96-00a0c903a1a2),
    version(1.0),
    pointer_default(unique)
]
interface INSSAuthenticator : IUnknown
{
    HRESULT Initialize( 
                [in] INSSServerContext *pServerContext,
                [out] DWORD *dwFlags,
                [out] LPBSTR pbstrDefaultRealm
                );

    // CreateAuthenticationContext
    // CreateCredential
    HRESULT CreateUserAuthentication( 
                [out] INSSUserAuthentication **ppUserAuthen 
                );

    HRESULT GetAuthenticationType( [out] LPBSTR bstrAuthenType );

    HRESULT GetAuthenticatorClass( [out] GUID *pCLSID );
};







///////////////////////////////////////////////////////////////////////////////
[
    object,
    uuid(48eea71a-3775-11d1-8c96-00a0c903a1a2),
    version(1.0),
    pointer_default(unique)
]
interface INSSUserAuthentication : IUnknown
{
    HRESULT Authenticate(
                [in] DWORD cbBlob,
                [in, size_is(cbBlob)] BYTE *pBlob,        
                [in] INSSCommandContext *pCommandContext,
                [in] INSSAuthenticationCallback *pCallback,
                [in] DWORD dwRequestId
                );

    HRESULT GetChallenge( 
                [out] DWORD *pcbBlob, 
                [out, size_is( , *pcbBlob)] BYTE **pBlob,
                [out] LPBSTR pbstrRealm
                );

    HRESULT GetAuthenticator( [out] INSSAuthenticator **pAuth );

    // The methods that follow GetAuthenticationResult cannot be 
    // used unless the authentication result is NS_AUTH_SUCCESS.
    // The result might be NS_AUTH_PENDING if authentication is
    // in progress.
    HRESULT GetAuthenticationResult( [out] NS_AUTH_RESULT *pResult );
                    
    HRESULT GetUserId( [out] BSTR *pbstrUserId );
    
    // The default NetShow resource access checking plugin requires 
    // these.
    HRESULT Impersonate();
    HRESULT Revert();
};




