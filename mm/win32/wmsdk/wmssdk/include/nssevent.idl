//+-------------------------------------------------------------------------
//
//  Copyright (C) Microsoft Corporation, 1998 - 1998
//
//  File:       nssevent.idl
//
//  Contents:   NetShow Unicast Server Authorization and Event Notification
//              Interface definitions
//
//--------------------------------------------------------------------------

cpp_quote("//+-------------------------------------------------------------------------")
cpp_quote("//")
cpp_quote("//  Microsoft NetShow")
cpp_quote("//  Copyright (C) Microsoft Corporation 1998.")
cpp_quote("//")
cpp_quote("//  Automatically generated by Midl from nssevent.idl")
cpp_quote("//")
cpp_quote("//  DO NOT EDIT THIS FILE.")
cpp_quote("//")
cpp_quote("//--------------------------------------------------------------------------")

import "oaidl.idl";
import "ocidl.idl";
import "nsscore.idl";

cpp_quote("#define NSS_EVENT_VERSION 1")



///////////////////////////////////////////////////////////////////////////////
typedef enum NSS_EVENT_TYPE
{
    NSSE_UNKNOWN_EVENT,
    NSSE_SKIP_AUTHENTICATION,
    NSSE_CONNECT,       // can be authorized
    NSSE_DISCONNECT,
    NSSE_OPEN,          // can be authorized
    NSSE_CLOSE,
    NSSE_PLAY,          // can be authorized
    NSSE_STOP,
} NSS_EVENT_TYPE;



///////////////////////////////////////////////////////////////////////////////
typedef struct NSS_EVENT
{
    DWORD Version;
    NSS_EVENT_TYPE Type;
    HRESULT hr;
} NSS_EVENT;





/////////////////////////////////////////////////////////////////////////////
// INSSEventNotification
[
    object,
    uuid(44f7d3e6-200c-11d1-8c94-00a0c903a1a2),
    helpstring("INSSEventNotification Interface"),
    version(1.0),
    pointer_default(unique)
]
interface INSSEventNotification : IUnknown
{
    HRESULT Initialize(
                [in] INSSServerContext *pServer,
                [out] DWORD *pdwMsHeartbeatPeriod );

    HRESULT GetHandledEvents( 
                [in] DWORD cMaxHandledEvents,
                [out] DWORD *pcHandledEvents,
                [out, size_is(cMaxHandledEvents), length_is(*pcHandledEvents)] 
                      NSS_EVENT_TYPE *rgHandledEvents );
                
    HRESULT Shutdown();

    HRESULT OnHeartBeat();
    
    HRESULT OnEvent( 
                [in] NSS_EVENT *pEvent,
                [in] INSSUserContext *pUser,
                [in] INSSPresentationContext *pPresentation,
                [in] INSSCommandContext *pCommand
                );
};




/////////////////////////////////////////////////////////////////////////////
// INSSEventAuthorizationCallback
[
    object,
    uuid(44f7d3e7-200c-11d1-8c94-00a0c903a1a2),
    helpstring("INSSEventAuthorizationCallback Interface"),
    version(1.0),
    pointer_default(unique)
]
interface INSSEventAuthorizationCallback : IUnknown
{
    HRESULT OnEventAuthorized( 
                [in] HRESULT hr, 
                [in] DWORD dwRequestId
                );
};



///////////////////////////////////////////////////////////////////////////////
// INSSEventAuthorization
[
    object,
    uuid(44f7d3e8-200c-11d1-8c94-00a0c903a1a2),
    helpstring("INSSEventAuthorization Interface"),
    version(1.0),
    pointer_default(unique)
]
interface INSSEventAuthorization : IUnknown
{
    HRESULT GetAuthorizedEvents( 
                [in] DWORD cMaxAuthorizedEvents,
                [out] DWORD *pcAuthorizedEvents,
                [out, size_is(cMaxAuthorizedEvents), length_is(*pcAuthorizedEvents)] 
                      NSS_EVENT_TYPE *rgAuthorizedEvents
                );
                
    HRESULT AuthorizeEvent( 
                [in] NSS_EVENT *pEvent,
                [in] INSSUserContext *pUser,
                [in] INSSPresentationContext *pPresentation,
                [in] INSSCommandContext *pCommand,
                [in] INSSEventAuthorizationCallback *pCallback,
                [in] DWORD dwRequestId
                );
};

